{
  // Place your esm_bot workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Binding.pry": {
    "scope": "ruby",
    "prefix": [
      "bd"
    ],
    "body": "binding.pry",
    "description": "Inserts a pry breakpoint"
  },
  "# frozen_string_literal: true": {
    "scope": "ruby",
    "prefix": "fsl",
    "body": [
      "# frozen_string_literal: true",
      "",
      "$0"
    ],
    "description": "Inserts the magic ruby comment to freeze all string literals"
  },
  "ESM Log (Trace)": {
    "scope": "ruby",
    "prefix": [
      "trace",
      "ESM.logger.trace"
    ],
    "body": [
      "trace!(${0})"
    ],
    "description": "Create an trace logger with ESM"
  },
  "ESM Log (Debug)": {
    "scope": "ruby",
    "prefix": [
      "debug",
      "ESM.logger.debug"
    ],
    "body": [
      "debug!(${0})"
    ],
    "description": "Create an debug logger with ESM"
  },
  "ESM Log (Info)": {
    "scope": "ruby",
    "prefix": [
      "info",
      "ESM.logger.info"
    ],
    "body": [
      "info!(${0})"
    ],
    "description": "Create an info logger with ESM"
  },
  "ESM Log (Warn)": {
    "scope": "ruby",
    "prefix": [
      "warn",
      "ESM.logger.warn"
    ],
    "body": [
      "warn!(${0})"
    ],
    "description": "Create an warn logger with ESM"
  },
  "ESM Log (Error)": {
    "scope": "ruby",
    "prefix": [
      "error",
      "ESM.logger.error"
    ],
    "body": [
      "error!(${0})"
    ],
    "description": "Create an error logger with ESM"
  },
  "ESM Log (Fatal)": {
    "scope": "ruby",
    "prefix": [
      "fatal",
      "ESM.logger.fatal"
    ],
    "body": [
      "fatal!(${0})"
    ],
    "description": "Create an fatal logger with ESM"
  },
  "Ruby Prof (Start)": {
    "scope": "ruby",
    "prefix": [
      "prof-start"
    ],
    "body": [
      "RubyProf.start"
    ],
    "description": "Inserts a ruby prof start command"
  },
  "Ruby Prof (Stop)": {
    "scope": "ruby",
    "prefix": [
      "prof-stop"
    ],
    "body": [
      "RubyProf::FlatPrinter.new(RubyProf.stop).print(STDOUT)"
    ],
    "description": "Inserts a ruby prof stop command"
  },
  "ESM Command Test": {
    "scope": "ruby",
    "prefix": [
      "Command Test"
    ],
    "body": [
      "# frozen_string_literal: true",
      "",
      "describe ${1:command}, category: \"command\" do",
      "\tinclude_context \"command\", described_class",
      "\tinclude_examples \"validate_command\"",
      "",
      "\t# Delete one, keep the other",
      "\tit \"is a player command\" do",
      "\t\texpect(command.type).to eq(:player)",
      "\tend",
      "",
      "\tit \"is an admin command\" do",
      "\t\texpect(command.type).to eq(:admin)",
      "\tend",
      "",
      "\t# Change \"requires_connection\" to true if this command requires the client to be connected",
      "\tdescribe \"#on_execute\", requires_connection: false do",
      "\t\t# Uncomment if \"requires_connection\" is true",
      "\t\t# include_context \"connection\"",
      "",
      "\t\tcontext \"\"",
      "\tend",
      "end"
    ],
    "description": "Create a rspec test for a ESM::Command"
  },
  "Embed": {
    "scope": "ruby",
    "prefix": "embed",
    "body": [
      "embed =",
      "\tESM::Embed.build do |e|",
      "\t\t# e.set_author(name:, url: nil, icon_url: nil)",
      "\t\t# e.title=(text)",
      "\t\t# e.description=(text)",
      "\t\t# e.add_field(name: nil, value:, inline: false)",
      "\t\t# e.thumbnail=(url)",
      "\t\t# e.image=(url)",
      "\t\t# e.color=(color)",
      "\t\t# e.footer=(text)",
      "\t\t# e.set_footer(text: nil, icon_url: nil)",
      "\tend"
    ],
    "description": "Inserts an embed with documentation"
  },
  "ESM Argument": {
    "prefix": "esm-argument",
    "description": "Creates a new ESM argument configuration",
    "body": [
      "argument(",
      "  # The unique identifier for this argument [Symbol or String] (required)",
      "  :${1:argument_name},",
      "",
      "  # Data type for Discord slash command [Symbol or String] (optional, defaults to :string)",
      "  :string,",
      "",
      "  # Controls if argument must be provided [Boolean or Hash] (optional, defaults to false)",
      "  required: false,",
      "",
      "  # Inherit configuration from a predefined template [Symbol or String] (optional)",
      "  template: :template_name,",
      "",
      "  # Short description shown in Discord UI [String] (<100 chars, required either here or in locale)",
      "  description: \"Description less than 100 chars\",",
      "",
      "  # Longer help text shown in documentation [String] (optional, can be locale path)",
      "  description_extra: \"Additional details shown in help\",",
      "",
      "  # Custom text shown when argument is optional [String] (optional, can be locale path)",
      "  optional_text: \"Custom optional text\",",
      "",
      "  # User-friendly name shown in help and UI [Symbol or String] (optional)",
      "  display_name: :friendly_name,",
      "",
      "  # Value used when argument is not provided [Object] (optional)",
      "  default: \"default value\",",
      "",
      "  # If false, converts argument value to lowercase [Boolean] (optional, defaults to false)",
      "  preserve_case: false,",
      "",
      "  # Transform the value before validation [Proc] (optional)",
      "  modifier: ->(value) { value },",
      "",
      "  # Predefined options user can select from [Hash] (optional, value => Display name)",
      "  choices: {},",
      "",
      "  # Lowest allowed value for number/integer arguments [Integer] (optional)",
      "  min_value: 0,",
      "",
      "  # Highest allowed value for number/integer arguments [Integer] (optional)",
      "  max_value: 100,",
      "",
      "  # Validation rule(s) for the argument value [Regex, String, Proc, or Array] (optional)",
      "  checked_against: /regex/,",
      "",
      "  # Determines when to run validation checks [Proc] (optional)",
      "  checked_against_if: -> { true },",
      "",
      "  # Text shown in usage examples [String or Symbol] (optional, defaults to name)",
      "  placeholder: \"Enter value\"",
      ")"
    ]
  },
  "ESM Argument (Without docs)": {
    "prefix": "esm-argument-nodocs",
    "description": "Creates a clean ESM argument configuration with all fields",
    "body": [
      "argument :${1:argument_name},",
      "  :string,",
      "  required: false,",
      "  template: :template_name,",
      "  description: \"Description less than 100 chars\",",
      "  description_extra: \"Additional details shown in help\",",
      "  optional_text: \"Custom optional text\",",
      "  display_name: :friendly_name,",
      "  default: \"default value\",",
      "  preserve_case: false,",
      "  modifier: ->(value) { value },",
      "  choices: {},",
      "  min_value: 0,",
      "  max_value: 100,",
      "  checked_against: /regex/,",
      "  checked_against_if: -> { true },",
      "  placeholder: \"Enter value\""
    ]
  },
  "ESM Command": {
    "prefix": "esm-command",
    "description": "Creates a new ESM command template",
    "body": [
      "# frozen_string_literal: true",
      "",
      "module ESM",
      "  module Command",
      "    module ${1:Namespace}",
      "      class ${2:CommandName} < ApplicationCommand",
      "        #################################",
      "        #",
      "        # Arguments (required first, then order matters)",
      "        #",
      "",
      "        # Available templates:",
      "        # argument :target        # Discord mention, ID, or Steam UID",
      "        # argument :command       # Valid ESM command",
      "        # argument :territory_id  # Territory identifier",
      "        # argument :community_id  # Community identifier, supports aliases and defaults",
      "        # argument :server_id     # Server identifier, supports aliases and defaults",
      "",
      "        ## Full argument syntax",
      "        argument(",
      "          # The unique identifier for this argument [Symbol or String] (required)",
      "          :argument_name,",
      "",
      "          # Data type for Discord slash command [Symbol or String] (optional, defaults to :string)",
      "          :string,",
      "",
      "          # Controls if argument must be provided [Boolean or Hash] (optional, defaults to false)",
      "          required: false,",
      "",
      "          # Inherit configuration from a predefined template [Symbol or String] (optional)",
      "          template: :template_name,",
      "",
      "          # Short description shown in Discord UI [String] (<100 chars, required either here or in locale)",
      "          description: \"Description less than 100 chars\",",
      "",
      "          # Longer help text shown in documentation [String] (optional, can be locale path)",
      "          description_extra: \"Additional details shown in help\",",
      "",
      "          # Custom text shown when argument is optional [String] (optional, can be locale path)",
      "          optional_text: \"Custom optional text\",",
      "",
      "          # User-friendly name shown in help and UI [Symbol or String] (optional)",
      "          display_name: :friendly_name,",
      "",
      "          # Value used when argument is not provided [Object] (optional)",
      "          default: \"default value\",",
      "",
      "          # If false, converts argument value to lowercase [Boolean] (optional, defaults to false)",
      "          preserve_case: false,",
      "",
      "          # Transform the value before validation [Proc] (optional)",
      "          modifier: ->(value) { value },",
      "",
      "          # Predefined options user can select from [Hash] (optional, value => Display name)",
      "          choices: {},",
      "",
      "          # Lowest allowed value for number/integer arguments [Integer] (optional)",
      "          min_value: 0,",
      "",
      "          # Highest allowed value for number/integer arguments [Integer] (optional)",
      "          max_value: 100,",
      "",
      "          # Validation rule(s) for the argument value [Regex, String, Proc, or Array] (optional)",
      "          checked_against: /regex/,",
      "",
      "          # Determines when to run validation checks [Proc] (optional)",
      "          checked_against_if: -> { true },",
      "",
      "          # Text shown in usage examples [String or Symbol] (optional, defaults to name)",
      "          placeholder: \"Enter value\"",
      "        )",
      "",
      "        #",
      "        # Configuration",
      "        #",
      "",
      "        # Sets command type (:player is default)",
      "        # Valid options: :admin, :player, :development",
      "        command_type :player",
      "",
      "        # Limits command to specific channel type (nil is default, allowing both)",
      "        # Valid options: :text, :pm",
      "        limit_to :text",
      "",
      "        # Command category and name configuration",
      "        # Default: /<category> <command_name>",
      "        # Examples:",
      "        #   command_namespace                     # Uses default",
      "        #   command_namespace :custom             # /custom <command_name>",
      "        #   command_namespace :my, :preferences   # /my preferences",
      "        #   use_root_namespace                    # /<command_name> (removes category)",
      "        use_root_namespace",
      "",
      "        # Configure command attributes (showing defaults)",
      "        change_attribute :enabled, default: true",
      "        change_attribute :allowlist_enabled, default: false",
      "        change_attribute :allowlisted_role_ids, default: []",
      "        change_attribute :allowed_in_text_channels, default: true",
      "        change_attribute :cooldown_time, default: 2.seconds",
      "",
      "        # Command requirements (registration is required by default)",
      "        # Valid options: :registration, :dev",
      "        requires :registration",
      "        does_not_require :registration  # Removes requirement",
      "",
      "        # Skip specific lifecycle checks",
      "        skip_actions :connected_server, :cooldown, :nil_target_user,",
      "          :nil_target_server, :nil_target_community, :different_community",
      "",
      "        #################################",
      "",
      "        def on_execute",
      "        end",
      "      end",
      "    end",
      "  end",
      "end"
    ]
  }
}
