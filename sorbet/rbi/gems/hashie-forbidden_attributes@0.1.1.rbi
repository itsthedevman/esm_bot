# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `hashie-forbidden_attributes` gem.
# Please instead update this file by running `bin/tapioca gem hashie-forbidden_attributes`.

# source://hashie-forbidden_attributes//lib/hashie-forbidden_attributes/hashie/mash.rb#3
module Hashie
  class << self
    # source://hashie/5.0.0/lib/hashie/logger.rb#7
    def logger; end

    # source://hashie/5.0.0/lib/hashie/logger.rb#15
    def logger=(logger); end
  end
end

# source://hashie-forbidden_attributes//lib/hashie-forbidden_attributes/hashie/mash.rb#4
class Hashie::Mash < ::Hashie::Hash
  # source://hashie/5.0.0/lib/hashie/mash.rb#100
  def initialize(source_hash = T.unsafe(nil), default = T.unsafe(nil), &blk); end

  # source://hashie/5.0.0/lib/hashie/mash.rb#125
  def [](key); end

  # source://hashie/5.0.0/lib/hashie/mash.rb#135
  def []=(key, value, convert = T.unsafe(nil)); end

  # source://hashie/5.0.0/lib/hashie/mash.rb#298
  def _method_missing(method_name, *args, &blk); end

  # source://hashie/5.0.0/lib/hashie/mash.rb#259
  def assign_property(name, value); end

  # source://hashie/5.0.0/lib/hashie/mash.rb#338
  def compact; end

  # source://hashie/5.0.0/lib/hashie/mash.rb#125
  def custom_reader(key); end

  # source://hashie/5.0.0/lib/hashie/mash.rb#135
  def custom_writer(key, value, convert = T.unsafe(nil)); end

  # source://hashie/5.0.0/lib/hashie/mash.rb#210
  def deep_merge(*other_hashes, &blk); end

  # source://hashie/5.0.0/lib/hashie/mash.rb#216
  def deep_merge!(*other_hashes, &blk); end

  # source://hashie/5.0.0/lib/hashie/mash.rb#216
  def deep_update(*other_hashes, &blk); end

  # source://hashie/5.0.0/lib/hashie/mash.rb#166
  def delete(key); end

  # source://hashie/5.0.0/lib/hashie/mash.rb#326
  def dig(*keys); end

  # source://hashie/5.0.0/lib/hashie/mash.rb#195
  def dup; end

  # source://hashie/5.0.0/lib/hashie/mash.rb#316
  def extractable_options?; end

  # source://hashie/5.0.0/lib/hashie/mash.rb#162
  def fetch(key, *args); end

  # source://hashie/5.0.0/lib/hashie/mash.rb#200
  def has_key?(key); end

  # source://hashie/5.0.0/lib/hashie/mash.rb#200
  def include?(key); end

  # source://hashie/5.0.0/lib/hashie/mash.rb#145
  def initializing_reader(key); end

  # source://hashie/5.0.0/lib/hashie/mash.rb#177
  def invert; end

  # source://hashie/5.0.0/lib/hashie/mash.rb#200
  def key?(key); end

  # source://hashie/5.0.0/lib/hashie/mash.rb#200
  def member?(key); end

  # source://hashie/5.0.0/lib/hashie/mash.rb#210
  def merge(*other_hashes, &blk); end

  # source://hashie/5.0.0/lib/hashie/mash.rb#216
  def merge!(*other_hashes, &blk); end

  # source://hashie-forbidden_attributes//lib/hashie-forbidden_attributes/hashie/mash.rb#13
  def method_missing(method_name, *args); end

  # source://hashie/5.0.0/lib/hashie/mash.rb#293
  def prefix_method?(method_name); end

  def regular_dup; end
  def regular_key?(_arg0); end
  def regular_reader(_arg0); end
  def regular_writer(_arg0, _arg1); end

  # source://hashie/5.0.0/lib/hashie/mash.rb#183
  def reject(&blk); end

  # source://hashie/5.0.0/lib/hashie/mash.rb#277
  def replace(other_hash); end

  # source://hashie/5.0.0/lib/hashie/mash.rb#321
  def reverse_merge(other_hash); end

  # source://hashie/5.0.0/lib/hashie/mash.rb#189
  def select(&blk); end

  # source://hashie/5.0.0/lib/hashie/mash.rb#264
  def shallow_merge(other_hash); end

  # source://hashie/5.0.0/lib/hashie/mash.rb#270
  def shallow_update(other_hash); end

  # source://hashie/5.0.0/lib/hashie/mash.rb#344
  def slice(*keys); end

  # source://hashie/5.0.0/lib/hashie/mash.rb#81
  def to_module(mash_method_name = T.unsafe(nil)); end

  # source://hashie/5.0.0/lib/hashie/extensions/pretty_inspect.rb#9
  def to_s; end

  # source://hashie/5.0.0/lib/hashie/mash.rb#349
  def transform_keys(&blk); end

  # source://hashie/5.0.0/lib/hashie/mash.rb#332
  def transform_values(&blk); end

  # source://hashie/5.0.0/lib/hashie/mash.rb#153
  def underbang_reader(key); end

  # source://hashie/5.0.0/lib/hashie/mash.rb#216
  def update(*other_hashes, &blk); end

  # source://hashie/5.0.0/lib/hashie/mash.rb#170
  def values_at(*keys); end

  # source://hashie/5.0.0/lib/hashie/mash.rb#90
  def with_accessors!; end

  protected

  # source://hashie/5.0.0/lib/hashie/mash.rb#377
  def convert_key(key); end

  # source://hashie/5.0.0/lib/hashie/mash.rb#381
  def convert_value(val, duping = T.unsafe(nil)); end

  # source://hashie/5.0.0/lib/hashie/mash.rb#363
  def method_name_and_suffix(method_name); end

  # source://hashie/5.0.0/lib/hashie/mash.rb#372
  def method_suffix(method_name); end

  private

  # source://hashie/5.0.0/lib/hashie/mash.rb#244
  def _deep_update(other_hash, &blk); end

  # source://hashie/5.0.0/lib/hashie/mash.rb#283
  def _respond_to_missing?(method_name, *args); end

  # source://hashie/5.0.0/lib/hashie/mash.rb#399
  def log_built_in_message(method_key); end

  # source://hashie/5.0.0/lib/hashie/mash.rb#412
  def log_collision?(method_key); end

  # @return [Boolean]
  #
  # source://hashie-forbidden_attributes//lib/hashie-forbidden_attributes/hashie/mash.rb#8
  def respond_to_missing?(method_name, *args); end

  class << self
    def [](*_arg0); end

    # source://hashie/5.0.0/lib/hashie/mash.rb#70
    def load(path, options = T.unsafe(nil)); end

    # source://hashie/5.0.0/lib/hashie/mash.rb#111
    def quiet(*method_keys); end
  end
end

# source://hashie-forbidden_attributes//lib/hashie-forbidden_attributes.rb#3
module HashieForbiddenAttributes; end
