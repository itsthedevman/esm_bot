# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `eye` gem.
# Please instead update this file by running `bin/tapioca gem eye`.

# source://eye//lib/eye/utils/mini_active_support.rb#42
class Array
  include ::Enumerable

  # source://eye//lib/eye/utils/mini_active_support.rb#43
  def extract_options!; end
end

# source://eye//lib/eye/utils/pmap.rb#1
module Enumerable
  # Simple parallel map using Celluloid::Futures
  #
  # source://eye//lib/eye/utils/pmap.rb#4
  def pmap(&block); end
end

# source://eye//lib/eye.rb#1
module Eye
  extend ::Eye::Dsl::Main
end

# source://eye//lib/eye.rb#3
Eye::ABOUT = T.let(T.unsafe(nil), String)

# source://eye//lib/eye/application.rb#1
class Eye::Application
  # @return [Application] a new instance of Application
  #
  # source://eye//lib/eye/application.rb#5
  def initialize(name, config = T.unsafe(nil)); end

  # source://eye//lib/eye/application.rb#20
  def add_group(group); end

  # @return [Boolean]
  #
  # source://eye//lib/eye/application.rb#45
  def alive?; end

  # Returns the value of attribute config.
  #
  # source://eye//lib/eye/application.rb#3
  def config; end

  # source://eye//lib/eye/application.rb#38
  def debug_data; end

  # source://eye//lib/eye/application.rb#16
  def full_name; end

  # Returns the value of attribute groups.
  #
  # source://eye//lib/eye/application.rb#3
  def groups; end

  # source://eye//lib/eye/application.rb#12
  def logger_tag; end

  # Returns the value of attribute name.
  #
  # source://eye//lib/eye/application.rb#3
  def name; end

  # source://eye//lib/eye/application.rb#55
  def processes; end

  # source://eye//lib/eye/application.rb#24
  def resort_groups; end

  # source://eye//lib/eye/application.rb#40
  def send_call(call); end

  # source://eye//lib/eye/application.rb#28
  def status_data(opts = T.unsafe(nil)); end

  # source://eye//lib/eye/application.rb#34
  def status_data_short; end

  # @return [Boolean]
  #
  # source://eye//lib/eye/application.rb#49
  def sub_object?(obj); end
end

# source://eye//lib/eye/dsl.rb#3
Eye::BINDING = T.let(T.unsafe(nil), Binding)

# source://eye//lib/eye/checker.rb#1
class Eye::Checker
  include ::Eye::Dsl::Validation
  extend ::Eye::Dsl::Validation::ClassMethods

  # @return [Checker] a new instance of Checker
  #
  # source://eye//lib/eye/checker.rb#62
  def initialize(pid, options = T.unsafe(nil), process = T.unsafe(nil)); end

  # source://eye//lib/eye/checker.rb#98
  def check; end

  # Returns the value of attribute check_count.
  #
  # source://eye//lib/eye/checker.rb#24
  def check_count; end

  # Sets the attribute check_count
  #
  # @param value the value to set the attribute check_count to.
  #
  # source://eye//lib/eye/checker.rb#24
  def check_count=(_arg0); end

  # source://eye//lib/eye/checker.rb#153
  def check_name; end

  # source://eye//lib/eye/checker.rb#203
  def defer(&block); end

  # source://eye//lib/eye/dsl/validation.rb#46
  def every; end

  # source://eye//lib/eye/dsl/validation.rb#51
  def every=(value); end

  # source://eye//lib/eye/checker.rb#189
  def fire; end

  # source://eye//lib/eye/dsl/validation.rb#46
  def fires; end

  # source://eye//lib/eye/dsl/validation.rb#51
  def fires=(value); end

  # @raise [NotImplementedError]
  #
  # source://eye//lib/eye/checker.rb#139
  def get_value; end

  # source://eye//lib/eye/checker.rb#135
  def get_value_safe; end

  # true if check ok
  # false if check bad
  #
  # @return [Boolean]
  #
  # source://eye//lib/eye/checker.rb#149
  def good?(value); end

  # source://eye//lib/eye/checker.rb#143
  def human_value(value); end

  # source://eye//lib/eye/dsl/validation.rb#46
  def initial_grace; end

  # source://eye//lib/eye/dsl/validation.rb#51
  def initial_grace=(value); end

  # source://eye//lib/eye/checker.rb#77
  def inspect; end

  # source://eye//lib/eye/checker.rb#89
  def last_human_values; end

  # source://eye//lib/eye/checker.rb#85
  def logger_sub_tag; end

  # source://eye//lib/eye/checker.rb#81
  def logger_tag; end

  # source://eye//lib/eye/checker.rb#157
  def max_tries; end

  # source://eye//lib/eye/checker.rb#169
  def min_tries; end

  # Returns the value of attribute options.
  #
  # source://eye//lib/eye/checker.rb#24
  def options; end

  # Sets the attribute options
  #
  # @param value the value to set the attribute options to.
  #
  # source://eye//lib/eye/checker.rb#24
  def options=(_arg0); end

  # Returns the value of attribute pid.
  #
  # source://eye//lib/eye/checker.rb#24
  def pid; end

  # Sets the attribute pid
  #
  # @param value the value to set the attribute pid to.
  #
  # source://eye//lib/eye/checker.rb#24
  def pid=(_arg0); end

  # source://eye//lib/eye/checker.rb#181
  def previous_value; end

  # Returns the value of attribute process.
  #
  # source://eye//lib/eye/checker.rb#24
  def process; end

  # Sets the attribute process
  #
  # @param value the value to set the attribute process to.
  #
  # source://eye//lib/eye/checker.rb#24
  def process=(_arg0); end

  # source://eye//lib/eye/checker.rb#185
  def run_in_process_context(p); end

  # source://eye//lib/eye/dsl/validation.rb#46
  def skip_initial_fails; end

  # source://eye//lib/eye/dsl/validation.rb#51
  def skip_initial_fails=(value); end

  # source://eye//lib/eye/dsl/validation.rb#46
  def times; end

  # source://eye//lib/eye/dsl/validation.rb#51
  def times=(value); end

  # Returns the value of attribute type.
  #
  # source://eye//lib/eye/checker.rb#24
  def type; end

  # Sets the attribute type
  #
  # @param value the value to set the attribute type to.
  #
  # source://eye//lib/eye/checker.rb#24
  def type=(_arg0); end

  # Returns the value of attribute value.
  #
  # source://eye//lib/eye/checker.rb#24
  def value; end

  # Sets the attribute value
  #
  # @param value the value to set the attribute value to.
  #
  # source://eye//lib/eye/checker.rb#24
  def value=(_arg0); end

  # Returns the value of attribute values.
  #
  # source://eye//lib/eye/checker.rb#24
  def values; end

  # Sets the attribute values
  #
  # @param value the value to set the attribute values to.
  #
  # source://eye//lib/eye/checker.rb#24
  def values=(_arg0); end

  class << self
    # source://eye//lib/eye/checker.rb#51
    def create(pid, options = T.unsafe(nil), process = T.unsafe(nil)); end

    # source://eye//lib/eye/checker.rb#42
    def get_class(type); end

    # source://eye//lib/eye/checker.rb#32
    def name_and_class(type); end

    # source://eye//lib/eye/checker.rb#215
    def register(base); end

    # source://eye//lib/eye/checker.rb#222
    def requires; end

    # source://eye//lib/eye/checker.rb#58
    def validate!(options); end
  end
end

# source://eye//lib/eye/checker/children_count.rb#1
class Eye::Checker::ChildrenCount < ::Eye::Checker::Measure
  # source://eye//lib/eye/checker/children_count.rb#12
  def fire; end

  # source://eye//lib/eye/checker/children_count.rb#8
  def get_value; end

  # source://eye//lib/eye/dsl/validation.rb#46
  def strategy; end

  # source://eye//lib/eye/dsl/validation.rb#51
  def strategy=(value); end

  private

  # source://eye//lib/eye/checker/children_count.rb#24
  def kill_pids(pids); end

  # source://eye//lib/eye/checker/children_count.rb#33
  def ordered_by_date_children_pids; end
end

# source://eye//lib/eye/checker/children_memory.rb#1
class Eye::Checker::ChildrenMemory < ::Eye::Checker::Measure
  # check :children_memory, :every => 30.seconds, :below => 400.megabytes
  #   monitor_children should be enabled
  #
  # source://eye//lib/eye/checker/children_memory.rb#6
  def get_value; end
end

# source://eye//lib/eye/checker/cpu.rb#1
class Eye::Checker::Cpu < ::Eye::Checker::Measure
  # check :cpu, :every => 3.seconds, :below => 80, :times => [3,5]
  #
  # source://eye//lib/eye/checker/cpu.rb#5
  def check_name; end

  # source://eye//lib/eye/checker/cpu.rb#9
  def get_value; end

  # source://eye//lib/eye/checker/cpu.rb#13
  def human_value(value); end
end

# source://eye//lib/eye/checker/cputime.rb#1
class Eye::Checker::Cputime < ::Eye::Checker::Measure
  # check :cputime, :every => 1.minute, :below => 120.minutes
  #
  # source://eye//lib/eye/checker/cputime.rb#5
  def get_value; end

  # source://eye//lib/eye/checker/cputime.rb#9
  def human_value(value); end
end

# source://eye//lib/eye/checker.rb#233
class Eye::Checker::Custom < ::Eye::Checker::Defer
  class << self
    # @private
    #
    # source://eye//lib/eye/checker.rb#235
    def inherited(base); end
  end
end

# source://eye//lib/eye/checker.rb#224
class Eye::Checker::CustomCell < ::Eye::Checker
  class << self
    # @private
    #
    # source://eye//lib/eye/checker.rb#226
    def inherited(base); end
  end
end

# source://eye//lib/eye/checker.rb#242
class Eye::Checker::CustomDefer < ::Eye::Checker::Defer
  class << self
    # @private
    #
    # source://eye//lib/eye/checker.rb#244
    def inherited(base); end
  end
end

# source://eye//lib/eye/checker.rb#207
class Eye::Checker::Defer < ::Eye::Checker
  # source://eye//lib/eye/checker.rb#209
  def get_value_safe; end
end

# source://eye//lib/eye/checker/file_ctime.rb#1
class Eye::Checker::FileCTime < ::Eye::Checker
  # @return [FileCTime] a new instance of FileCTime
  #
  # source://eye//lib/eye/checker/file_ctime.rb#8
  def initialize(*args); end

  # source://eye//lib/eye/dsl/validation.rb#46
  def file; end

  # source://eye//lib/eye/dsl/validation.rb#51
  def file=(value); end

  # source://eye//lib/eye/checker/file_ctime.rb#13
  def get_value; end

  # @return [Boolean]
  #
  # source://eye//lib/eye/checker/file_ctime.rb#25
  def good?(value); end

  # source://eye//lib/eye/checker/file_ctime.rb#17
  def human_value(value); end
end

# source://eye//lib/eye/checker/file_size.rb#1
class Eye::Checker::FileSize < ::Eye::Checker::Measure
  # @return [FileSize] a new instance of FileSize
  #
  # source://eye//lib/eye/checker/file_size.rb#9
  def initialize(*args); end

  # source://eye//lib/eye/checker/file_size.rb#14
  def check_name; end

  # source://eye//lib/eye/dsl/validation.rb#46
  def file; end

  # source://eye//lib/eye/dsl/validation.rb#51
  def file=(value); end

  # source://eye//lib/eye/checker/file_size.rb#18
  def get_value; end

  # @return [Boolean]
  #
  # source://eye//lib/eye/checker/file_size.rb#26
  def good?(value); end

  # source://eye//lib/eye/checker/file_size.rb#22
  def human_value(value); end
end

# source://eye//lib/eye/checker/file_touched.rb#1
class Eye::Checker::FileTouched < ::Eye::Checker
  # @return [FileTouched] a new instance of FileTouched
  #
  # source://eye//lib/eye/checker/file_touched.rb#6
  def initialize(*args); end

  # source://eye//lib/eye/dsl/validation.rb#46
  def delete; end

  # source://eye//lib/eye/dsl/validation.rb#51
  def delete=(value); end

  # source://eye//lib/eye/dsl/validation.rb#46
  def file; end

  # source://eye//lib/eye/dsl/validation.rb#51
  def file=(value); end

  # source://eye//lib/eye/checker/file_touched.rb#11
  def get_value; end

  # @return [Boolean]
  #
  # source://eye//lib/eye/checker/file_touched.rb#15
  def good?(value); end
end

# source://eye//lib/eye/checker/http.rb#3
class Eye::Checker::Http < ::Eye::Checker::Defer
  # @return [Http] a new instance of Http
  #
  # source://eye//lib/eye/checker/http.rb#18
  def initialize(*args); end

  # source://eye//lib/eye/checker/http.rb#32
  def get_value; end

  # @return [Boolean]
  #
  # source://eye//lib/eye/checker/http.rb#50
  def good?(value); end

  # source://eye//lib/eye/checker/http.rb#67
  def human_value(value); end

  # source://eye//lib/eye/dsl/validation.rb#46
  def kind; end

  # source://eye//lib/eye/dsl/validation.rb#51
  def kind=(value); end

  # source://eye//lib/eye/dsl/validation.rb#46
  def open_timeout; end

  # source://eye//lib/eye/dsl/validation.rb#51
  def open_timeout=(value); end

  # source://eye//lib/eye/dsl/validation.rb#46
  def pattern; end

  # source://eye//lib/eye/dsl/validation.rb#51
  def pattern=(value); end

  # source://eye//lib/eye/dsl/validation.rb#46
  def proxy_url; end

  # source://eye//lib/eye/dsl/validation.rb#51
  def proxy_url=(value); end

  # source://eye//lib/eye/dsl/validation.rb#46
  def read_timeout; end

  # source://eye//lib/eye/dsl/validation.rb#51
  def read_timeout=(value); end

  # source://eye//lib/eye/dsl/validation.rb#46
  def timeout; end

  # source://eye//lib/eye/dsl/validation.rb#51
  def timeout=(value); end

  # Returns the value of attribute uri.
  #
  # source://eye//lib/eye/checker/http.rb#16
  def uri; end

  # source://eye//lib/eye/dsl/validation.rb#46
  def url; end

  # source://eye//lib/eye/dsl/validation.rb#51
  def url=(value); end

  private

  # source://eye//lib/eye/checker/http.rb#95
  def net_http; end

  # source://eye//lib/eye/checker/http.rb#82
  def session; end
end

# source://eye//lib/eye/checker.rb#251
class Eye::Checker::Measure < ::Eye::Checker
  # source://eye//lib/eye/dsl/validation.rb#46
  def above; end

  # source://eye//lib/eye/dsl/validation.rb#51
  def above=(value); end

  # source://eye//lib/eye/dsl/validation.rb#46
  def below; end

  # source://eye//lib/eye/dsl/validation.rb#51
  def below=(value); end

  # @return [Boolean]
  #
  # source://eye//lib/eye/checker.rb#256
  def good?(value); end

  # source://eye//lib/eye/checker.rb#262
  def measure_str; end
end

# source://eye//lib/eye/checker/memory.rb#1
class Eye::Checker::Memory < ::Eye::Checker::Measure
  # check :memory, :every => 3.seconds, :below => 80.megabytes, :times => [3,5]
  #
  # source://eye//lib/eye/checker/memory.rb#5
  def check_name; end

  # source://eye//lib/eye/checker/memory.rb#9
  def get_value; end

  # source://eye//lib/eye/checker/memory.rb#13
  def human_value(value); end
end

# source://eye//lib/eye/checker/nop.rb#1
class Eye::Checker::Nop < ::Eye::Checker
  # check :nop, :every => 10.hours # means restart every 10 hours
  #
  # source://eye//lib/eye/checker/nop.rb#5
  def get_value; end
end

# source://eye//lib/eye/checker/runtime.rb#1
class Eye::Checker::Runtime < ::Eye::Checker::Measure
  # check :runtime, :every => 1.minute, :below => 120.minutes
  #
  # source://eye//lib/eye/checker/runtime.rb#5
  def get_value; end

  # source://eye//lib/eye/checker/runtime.rb#14
  def human_value(value); end
end

# source://eye//lib/eye/checker/socket.rb#1
class Eye::Checker::Socket < ::Eye::Checker::Defer
  # @return [Socket] a new instance of Socket
  #
  # source://eye//lib/eye/checker/socket.rb#23
  def initialize(*args); end

  # source://eye//lib/eye/dsl/validation.rb#46
  def addr; end

  # source://eye//lib/eye/dsl/validation.rb#51
  def addr=(value); end

  # source://eye//lib/eye/dsl/validation.rb#46
  def expect_data; end

  # source://eye//lib/eye/dsl/validation.rb#51
  def expect_data=(value); end

  # source://eye//lib/eye/checker/socket.rb#38
  def get_value; end

  # @return [Boolean]
  #
  # source://eye//lib/eye/checker/socket.rb#66
  def good?(value); end

  # source://eye//lib/eye/checker/socket.rb#98
  def human_value(value); end

  # source://eye//lib/eye/dsl/validation.rb#46
  def open_timeout; end

  # source://eye//lib/eye/dsl/validation.rb#51
  def open_timeout=(value); end

  # source://eye//lib/eye/dsl/validation.rb#46
  def protocol; end

  # source://eye//lib/eye/dsl/validation.rb#51
  def protocol=(value); end

  # source://eye//lib/eye/dsl/validation.rb#46
  def read_timeout; end

  # source://eye//lib/eye/dsl/validation.rb#51
  def read_timeout=(value); end

  # source://eye//lib/eye/dsl/validation.rb#46
  def send_data; end

  # source://eye//lib/eye/dsl/validation.rb#51
  def send_data=(value); end

  # source://eye//lib/eye/dsl/validation.rb#46
  def timeout; end

  # source://eye//lib/eye/dsl/validation.rb#51
  def timeout=(value); end

  private

  # source://eye//lib/eye/checker/socket.rb#134
  def _read_data(socket); end

  # source://eye//lib/eye/checker/socket.rb#124
  def _write_data(socket, data); end

  # source://eye//lib/eye/checker/socket.rb#114
  def open_socket; end
end

# source://eye//lib/eye/checker/ssl_socket.rb#3
class Eye::Checker::SslSocket < ::Eye::Checker::Socket
  # source://eye//lib/eye/dsl/validation.rb#46
  def ctx; end

  # source://eye//lib/eye/dsl/validation.rb#51
  def ctx=(value); end

  private

  # source://eye//lib/eye/checker/ssl_socket.rb#24
  def ctx_params; end

  # source://eye//lib/eye/checker/ssl_socket.rb#17
  def open_socket; end
end

# source://eye//lib/eye/checker.rb#19
Eye::Checker::TYPES = T.let(T.unsafe(nil), Hash)

# source://eye//lib/eye/child_process.rb#3
class Eye::ChildProcess
  include ::Celluloid
  include ::Celluloid::InstanceMethods
  include ::Eye::Process::Commands
  include ::Eye::Process::Config
  include ::Eye::Process::Watchers
  include ::Eye::Process::System
  include ::Eye::Process::Data
  include ::Eye::Process::Notify
  include ::Eye::Process::Scheduler
  extend ::Celluloid::ClassMethods
  extend ::Celluloid::Internals::Properties

  # @return [ChildProcess] a new instance of ChildProcess
  #
  # source://eye//lib/eye/child_process.rb#30
  def initialize(pid, config = T.unsafe(nil), logger_prefix = T.unsafe(nil), parent = T.unsafe(nil)); end

  # Returns the value of attribute config.
  #
  # source://eye//lib/eye/child_process.rb#28
  def config; end

  # source://eye//lib/eye/child_process.rb#78
  def delete; end

  # source://eye//lib/eye/child_process.rb#80
  def destroy; end

  # Returns the value of attribute full_name.
  #
  # source://eye//lib/eye/child_process.rb#28
  def full_name; end

  # source://eye//lib/eye/child_process.rb#48
  def logger_tag; end

  # source://eye//lib/eye/child_process.rb#74
  def monitor; end

  # Returns the value of attribute name.
  #
  # source://eye//lib/eye/child_process.rb#28
  def name; end

  # Returns the value of attribute pid.
  #
  # source://eye//lib/eye/child_process.rb#28
  def pid; end

  # override
  #
  # source://eye//lib/eye/child_process.rb#94
  def prepare_command(command); end

  # source://eye//lib/eye/child_process.rb#66
  def restart; end

  # source://eye//lib/eye/child_process.rb#85
  def signal(sig); end

  # source://eye//lib/eye/child_process.rb#60
  def start; end

  # source://eye//lib/eye/child_process.rb#52
  def state; end

  # source://eye//lib/eye/child_process.rb#89
  def status_data(opts = T.unsafe(nil)); end

  # source://eye//lib/eye/child_process.rb#62
  def stop; end

  # source://eye//lib/eye/child_process.rb#76
  def unmonitor; end

  # @return [Boolean]
  #
  # source://eye//lib/eye/child_process.rb#56
  def up?; end

  # Returns the value of attribute watchers.
  #
  # source://eye//lib/eye/child_process.rb#28
  def watchers; end

  class << self
    # source://celluloid/0.17.4/lib/celluloid.rb#71
    def exclusive(*args); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def exclusive_actor(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def exclusive_methods(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def execute_block_on_receiver(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def exit_handler_name(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def finalizer(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def group_class(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def mailbox_class(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def mailbox_size(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def proxy_class(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def task_class(value = T.unsafe(nil), *extra); end

    # source://celluloid/0.17.4/lib/celluloid.rb#67
    def trap_exit(*args); end
  end
end

# source://eye//lib/eye/cli.rb#6
class Eye::Cli < ::Thor
  include ::Eye::Cli::Server
  include ::Eye::Cli::Commands
  include ::Eye::Cli::Render

  # source://eye//lib/eye/cli.rb#146
  def break(*masks); end

  # source://eye//lib/eye/cli.rb#164
  def check(conf); end

  # source://eye//lib/eye/cli.rb#129
  def delete(*masks); end

  # source://eye//lib/eye/cli.rb#176
  def explain(conf); end

  # source://eye//lib/eye/cli.rb#135
  def force_restart(*masks); end

  # source://eye//lib/eye/cli.rb#73
  def history(*masks); end

  # source://eye//lib/eye/cli.rb#20
  def info(mask = T.unsafe(nil)); end

  # source://eye//lib/eye/cli.rb#88
  def load(*configs); end

  # source://eye//lib/eye/cli.rb#129
  def match(*masks); end

  # source://eye//lib/eye/cli.rb#129
  def monitor(*masks); end

  # source://eye//lib/eye/cli.rb#61
  def oinfo(mask = T.unsafe(nil)); end

  # source://eye//lib/eye/cli.rb#109
  def quit; end

  # source://eye//lib/eye/cli.rb#129
  def restart(*masks); end

  # source://eye//lib/eye/cli.rb#141
  def signal(sig, *masks); end

  # source://eye//lib/eye/cli.rb#129
  def start(*masks); end

  # source://eye//lib/eye/cli.rb#39
  def status(name); end

  # source://eye//lib/eye/cli.rb#129
  def stop(*masks); end

  # source://eye//lib/eye/cli.rb#151
  def trace(mask = T.unsafe(nil)); end

  # source://eye//lib/eye/cli.rb#129
  def unmonitor(*masks); end

  # source://eye//lib/eye/cli.rb#204
  def user_command(cmd, *args); end

  # source://eye//lib/eye/cli.rb#157
  def version; end

  # source://eye//lib/eye/cli.rb#187
  def watch(*args); end

  # source://eye//lib/eye/cli.rb#49
  def xinfo; end

  private

  # source://eye//lib/eye/cli.rb#214
  def error!(msg); end

  # source://eye//lib/eye/cli.rb#224
  def log_trace(tag = T.unsafe(nil)); end

  # source://eye//lib/eye/cli.rb#219
  def print(msg, new_line = T.unsafe(nil)); end

  # source://eye//lib/eye/cli.rb#233
  def say_json(obj); end

  class << self
    # @return [Boolean]
    #
    # source://eye//lib/eye/cli.rb#208
    def exit_on_failure?; end
  end
end

# source://eye//lib/eye/cli/commands.rb#1
module Eye::Cli::Commands
  private

  # source://eye//lib/eye/cli/commands.rb#9
  def _cmd(cmd, *args); end

  # source://eye//lib/eye/cli/commands.rb#5
  def client; end

  # source://eye//lib/eye/cli/commands.rb#15
  def cmd(cmd, *args); end

  # source://eye//lib/eye/cli/commands.rb#27
  def say_load_result(res = T.unsafe(nil), opts = T.unsafe(nil)); end

  # source://eye//lib/eye/cli/commands.rb#56
  def send_command(command, *args); end

  # source://eye//lib/eye/cli/commands.rb#40
  def show_load_message(res, opts = T.unsafe(nil)); end
end

# source://eye//lib/eye/cli/render.rb#1
module Eye::Cli::Render
  private

  # source://eye//lib/eye/cli/render.rb#82
  def detail_process_info(name, history); end

  # source://eye//lib/eye/cli/render.rb#103
  def detail_process_info_string(h); end

  # source://eye//lib/eye/cli/render.rb#25
  def make_str(data, level = T.unsafe(nil)); end

  # source://eye//lib/eye/cli/render.rb#49
  def render_debug_info(data); end

  # source://eye//lib/eye/cli/render.rb#109
  def render_element(data, level); end

  # source://eye//lib/eye/cli/render.rb#77
  def render_history(data); end

  # source://eye//lib/eye/cli/render.rb#19
  def render_info(data); end

  # source://eye//lib/eye/cli/render.rb#5
  def render_status(data); end

  # source://eye//lib/eye/cli/render.rb#146
  def resources_str(r); end
end

# source://eye//lib/eye/cli/server.rb#3
module Eye::Cli::Server
  private

  # source://eye//lib/eye/cli/server.rb#20
  def ensure_loader_path; end

  # source://eye//lib/eye/cli/server.rb#81
  def ensure_stop_previous_server; end

  # source://eye//lib/eye/cli/server.rb#11
  def loader_path; end

  # source://eye//lib/eye/cli/server.rb#16
  def ruby_path; end

  # source://eye//lib/eye/cli/server.rb#44
  def server_start(configs); end

  # source://eye//lib/eye/cli/server.rb#26
  def server_start_foreground(conf = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://eye//lib/eye/cli/server.rb#7
  def server_started?; end

  # source://eye//lib/eye/cli/server.rb#89
  def wait_server(timeout = T.unsafe(nil)); end
end

# source://eye//lib/eye/client.rb#4
class Eye::Client
  # @return [Client] a new instance of Client
  #
  # source://eye//lib/eye/client.rb#8
  def initialize(socket_path, type = T.unsafe(nil)); end

  # source://eye//lib/eye/client.rb#15
  def execute(h = T.unsafe(nil)); end

  # Returns the value of attribute socket_path.
  #
  # source://eye//lib/eye/client.rb#6
  def socket_path; end

  private

  # source://eye//lib/eye/client.rb#28
  def attempt_command(payload, timeout); end

  # source://eye//lib/eye/client.rb#34
  def send_request(pack); end
end

# source://eye//lib/eye/client.rb#13
Eye::Client::SIGN = T.let(T.unsafe(nil), Integer)

# source://eye//lib/eye/config.rb#1
class Eye::Config
  # @return [Config] a new instance of Config
  #
  # source://eye//lib/eye/config.rb#5
  def initialize(settings = T.unsafe(nil), applications = T.unsafe(nil)); end

  # source://eye//lib/eye/config.rb#105
  def application_names; end

  # Returns the value of attribute applications.
  #
  # source://eye//lib/eye/config.rb#3
  def applications; end

  # source://eye//lib/eye/config.rb#109
  def delete_app(name); end

  # source://eye//lib/eye/config.rb#113
  def delete_group(name); end

  # source://eye//lib/eye/config.rb#119
  def delete_process(name); end

  # source://eye//lib/eye/config.rb#97
  def each_process(&block); end

  # source://eye//lib/eye/config.rb#10
  def merge(other_config); end

  # source://eye//lib/eye/config.rb#17
  def merge!(other_config); end

  # Returns the value of attribute settings.
  #
  # source://eye//lib/eye/config.rb#3
  def settings; end

  # source://eye//lib/eye/config.rb#22
  def to_h; end

  # source://eye//lib/eye/config.rb#76
  def transform!; end

  # raise an error if config wrong
  #
  # source://eye//lib/eye/config.rb#34
  def validate!(validate_apps = T.unsafe(nil)); end
end

# controller global singlton
#
# source://eye//lib/eye/control.rb#2
Eye::Control = T.let(T.unsafe(nil), Celluloid::Proxy::Cell)

# source://eye//lib/eye/controller.rb#14
class Eye::Controller
  include ::Celluloid
  include ::Celluloid::InstanceMethods
  include ::Eye::Controller::Load
  include ::Eye::Controller::Helpers
  include ::Eye::Controller::Commands
  include ::Eye::Controller::Status
  include ::Eye::Controller::Apply
  include ::Eye::Controller::Options
  extend ::Celluloid::ClassMethods
  extend ::Celluloid::Internals::Properties

  # @return [Controller] a new instance of Controller
  #
  # source://eye//lib/eye/controller.rb#34
  def initialize; end

  # Returns the value of attribute applications.
  #
  # source://eye//lib/eye/controller.rb#32
  def applications; end

  # Returns the value of attribute current_config.
  #
  # source://eye//lib/eye/controller.rb#32
  def current_config; end

  # source://eye//lib/eye/controller.rb#47
  def logger_tag; end

  # source://eye//lib/eye/controller.rb#43
  def settings; end

  class << self
    # source://celluloid/0.17.4/lib/celluloid.rb#71
    def exclusive(*args); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def exclusive_actor(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def exclusive_methods(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def execute_block_on_receiver(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def exit_handler_name(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def finalizer(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def group_class(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def mailbox_class(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def mailbox_size(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def proxy_class(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def task_class(value = T.unsafe(nil), *extra); end

    # source://celluloid/0.17.4/lib/celluloid.rb#67
    def trap_exit(*args); end
  end
end

# source://eye//lib/eye/controller/apply.rb#1
module Eye::Controller::Apply
  # source://eye//lib/eye/controller/apply.rb#3
  def apply(masks, call); end

  # source://eye//lib/eye/controller/apply.rb#16
  def match(*args); end

  private

  # source://eye//lib/eye/controller/apply.rb#22
  def apply_to_objects(objs, call); end

  # source://eye//lib/eye/controller/apply.rb#171
  def exact_regexp(mask); end

  # source://eye//lib/eye/controller/apply.rb#133
  def find_all_objects_by_mask(mask); end

  # find object to action, restart ... (app, group or process)
  # nil if not found
  #
  # source://eye//lib/eye/controller/apply.rb#66
  def find_objects(*args); end

  # source://eye//lib/eye/controller/apply.rb#87
  def find_objects_by_mask(mask); end

  # source://eye//lib/eye/controller/apply.rb#166
  def left_regexp(mask); end

  # source://eye//lib/eye/controller/apply.rb#31
  def matched_objects(*args, &block); end

  # source://eye//lib/eye/controller/apply.rb#45
  def remove_object_from_tree(obj); end
end

# source://eye//lib/eye/controller/apply.rb#29
class Eye::Controller::Apply::Error < ::RuntimeError; end

# source://eye//lib/eye/controller/commands.rb#1
module Eye::Controller::Commands
  # Main method, answer for the client command
  #
  # source://eye//lib/eye/controller/commands.rb#7
  def command(cmd, *args); end

  private

  # source://eye//lib/eye/controller/commands.rb#69
  def quit; end

  # stop all processes and wait
  #
  # source://eye//lib/eye/controller/commands.rb#77
  def stop_all(timeout = T.unsafe(nil)); end
end

# source://eye//lib/eye/controller/commands.rb#3
Eye::Controller::Commands::NOT_IMPORTANT_COMMANDS = T.let(T.unsafe(nil), Array)

# source://eye//lib/eye/controller/helpers.rb#1
module Eye::Controller::Helpers
  # source://eye//lib/eye/controller/helpers.rb#71
  def all_groups; end

  # source://eye//lib/eye/controller/helpers.rb#62
  def all_processes; end

  # source://eye//lib/eye/controller/helpers.rb#57
  def application_by_name(name); end

  # source://eye//lib/eye/controller/helpers.rb#18
  def cache_str; end

  # source://eye//lib/eye/controller/helpers.rb#32
  def find_nearest_process(name, group_name = T.unsafe(nil), app_name = T.unsafe(nil)); end

  # source://eye//lib/eye/controller/helpers.rb#52
  def group_by_name(name); end

  # source://eye//lib/eye/controller/helpers.rb#27
  def process_by_full_name(name); end

  # source://eye//lib/eye/controller/helpers.rb#22
  def process_by_name(name); end

  # source://eye//lib/eye/controller/helpers.rb#12
  def save_cache; end

  # source://eye//lib/eye/controller/helpers.rb#3
  def set_proc_line; end

  # {'app_name' => {'group_name' => {'process_name' => 'pid_file'}}}
  #
  # source://eye//lib/eye/controller/helpers.rb#81
  def short_tree; end
end

# source://eye//lib/eye/controller/load.rb#1
module Eye::Controller::Load
  # source://eye//lib/eye/controller/load.rb#3
  def check(filename); end

  # source://eye//lib/eye/controller/load.rb#7
  def explain(filename); end

  # source://eye//lib/eye/controller/load.rb#11
  def load(*args); end

  private

  # source://eye//lib/eye/controller/load.rb#38
  def catch_load_error(filename = T.unsafe(nil), &_block); end

  # create objects as diff, from configs
  #
  # source://eye//lib/eye/controller/load.rb#106
  def create_objects(apps_config, changed_apps = T.unsafe(nil)); end

  # source://eye//lib/eye/controller/load.rb#56
  def globbing(*obj_strs); end

  # !!! exclusive operation
  #
  # source://eye//lib/eye/controller/load.rb#85
  def load_config(filename, config); end

  # load global config options
  #
  # source://eye//lib/eye/controller/load.rb#96
  def load_options(opts); end

  # return: result, config
  #
  # source://eye//lib/eye/controller/load.rb#79
  def parse_config(filename); end

  # source://eye//lib/eye/controller/load.rb#134
  def update_or_create_application(app_name, app_config); end

  # source://eye//lib/eye/controller/load.rb#191
  def update_or_create_group(group_name, group_config, diff); end

  # source://eye//lib/eye/controller/load.rb#214
  def update_or_create_process(process_name, process_cfg, diff); end
end

# source://eye//lib/eye/controller/load.rb#117
class Eye::Controller::Load::AppDiff
  # @return [AppDiff] a new instance of AppDiff
  #
  # source://eye//lib/eye/controller/load.rb#121
  def initialize; end

  # Returns the value of attribute added_groups.
  #
  # source://eye//lib/eye/controller/load.rb#119
  def added_groups; end

  # Returns the value of attribute added_processes.
  #
  # source://eye//lib/eye/controller/load.rb#119
  def added_processes; end

  # Returns the value of attribute old_groups.
  #
  # source://eye//lib/eye/controller/load.rb#119
  def old_groups; end

  # Returns the value of attribute old_processes.
  #
  # source://eye//lib/eye/controller/load.rb#119
  def old_processes; end

  # source://eye//lib/eye/controller/load.rb#128
  def remove_added_processes(processes); end
end

# regexp for clean backtrace to show for user
#
# source://eye//lib/eye/controller/load.rb#36
Eye::Controller::Load::BT_REGX = T.let(T.unsafe(nil), Regexp)

# source://eye//lib/eye/controller/options.rb#1
module Eye::Controller::Options
  # source://eye//lib/eye/controller/options.rb#3
  def set_opt_logger(logger_args); end

  # source://eye//lib/eye/controller/options.rb#10
  def set_opt_logger_level(level); end
end

# source://eye//lib/eye/controller/status.rb#1
module Eye::Controller::Status
  # source://eye//lib/eye/controller/status.rb#3
  def debug_data(*args); end

  # source://eye//lib/eye/controller/status.rb#35
  def history_data(*args); end

  # source://eye//lib/eye/controller/status.rb#26
  def info_data(*args); end

  # source://eye//lib/eye/controller/status.rb#31
  def short_data(*args); end

  private

  # source://eye//lib/eye/controller/status.rb#52
  def gem_version(klass); end

  # source://eye//lib/eye/controller/status.rb#62
  def history_objects(*args); end

  # source://eye//lib/eye/controller/status.rb#45
  def info_objects(*args); end
end

# source://eye//lib/eye/dsl.rb#5
class Eye::Dsl
  class << self
    # @raise [Error]
    #
    # source://eye//lib/eye/dsl.rb#49
    def check_name(name); end

    # source://eye//lib/eye/dsl.rb#24
    def debug(msg = T.unsafe(nil)); end

    # source://eye//lib/eye/dsl.rb#28
    def parse(content = T.unsafe(nil), filename = T.unsafe(nil)); end

    # source://eye//lib/eye/dsl.rb#45
    def parse_apps(*args); end

    # Returns the value of attribute verbose.
    #
    # source://eye//lib/eye/dsl.rb#22
    def verbose; end

    # Sets the attribute verbose
    #
    # @param value the value to set the attribute verbose to.
    #
    # source://eye//lib/eye/dsl.rb#22
    def verbose=(_arg0); end
  end
end

# source://eye//lib/eye/dsl/application_opts.rb#1
class Eye::Dsl::ApplicationOpts < ::Eye::Dsl::Opts
  include ::Eye::Dsl::Chain

  # source://eye//lib/eye/dsl/application_opts.rb#5
  def disallow_options; end

  # source://eye//lib/eye/dsl/application_opts.rb#13
  def group(name, &block); end

  # source://eye//lib/eye/dsl/application_opts.rb#9
  def not_seed_options; end

  # source://eye//lib/eye/dsl/application_opts.rb#31
  def process(name, &block); end

  # source://eye//lib/eye/dsl/pure_opts.rb#102
  def xgroup(*args, &block); end

  # source://eye//lib/eye/dsl/pure_opts.rb#102
  def xprocess(*args, &block); end
end

# source://eye//lib/eye/dsl/chain.rb#1
module Eye::Dsl::Chain
  # source://eye//lib/eye/dsl/chain.rb#3
  def chain(opts = T.unsafe(nil)); end
end

# source://eye//lib/eye/dsl/child_process_opts.rb#1
class Eye::Dsl::ChildProcessOpts < ::Eye::Dsl::Opts
  # source://eye//lib/eye/dsl/child_process_opts.rb#3
  def allow_options; end

  # @raise [Eye::Dsl::Error]
  #
  # source://eye//lib/eye/dsl/child_process_opts.rb#8
  def trigger(*_args); end

  # @raise [Eye::Dsl::Error]
  #
  # source://eye//lib/eye/dsl/child_process_opts.rb#8
  def triggers(*_args); end
end

# source://eye//lib/eye/dsl/config_opts.rb#1
class Eye::Dsl::ConfigOpts < ::Eye::Dsl::PureOpts
  # @raise [Eye::Dsl::Error]
  #
  # source://eye//lib/eye/dsl/config_opts.rb#35
  def contact(contact_name, contact_type, contact, contact_opts = T.unsafe(nil)); end

  # source://eye//lib/eye/dsl/config_opts.rb#49
  def contact_group(contact_group_name, &block); end

  # source://eye//lib/eye/dsl/config_opts.rb#6
  def logger(*args); end

  # source://eye//lib/eye/dsl/config_opts.rb#6
  def logger=(*args); end

  # source://eye//lib/eye/dsl/config_opts.rb#26
  def set_jabber(value); end

  # source://eye//lib/eye/dsl/config_opts.rb#26
  def set_mail(value); end

  # source://eye//lib/eye/dsl/config_opts.rb#26
  def set_slack(value); end

  # source://eye//lib/eye/dsl/config_opts.rb#15
  def syslog(name = T.unsafe(nil), *args); end

  class << self
    # ==== contact options ==============================
    #
    # source://eye//lib/eye/dsl/config_opts.rb#23
    def add_notify(type); end
  end
end

# source://eye//lib/eye/dsl.rb#18
class Eye::Dsl::Error < ::RuntimeError; end

# source://eye//lib/eye/dsl/group_opts.rb#1
class Eye::Dsl::GroupOpts < ::Eye::Dsl::Opts
  include ::Eye::Dsl::Chain

  # source://eye//lib/eye/dsl/pure_opts.rb#44
  def app; end

  # source://eye//lib/eye/dsl/pure_opts.rb#44
  def application; end

  # source://eye//lib/eye/dsl/group_opts.rb#5
  def disallow_options; end

  # source://eye//lib/eye/dsl/group_opts.rb#9
  def not_seed_options; end

  # source://eye//lib/eye/dsl/group_opts.rb#13
  def process(name, &block); end

  # source://eye//lib/eye/dsl/pure_opts.rb#102
  def xprocess(*args, &block); end
end

# source://eye//lib/eye/dsl/main.rb#1
module Eye::Dsl::Main
  # source://eye//lib/eye/dsl/main.rb#5
  def app(name, &block); end

  # source://eye//lib/eye/dsl/main.rb#5
  def application(name, &block); end

  # source://eye//lib/eye/dsl/main.rb#47
  def config(&block); end

  # source://eye//lib/eye/dsl/main.rb#26
  def load(glob = T.unsafe(nil)); end

  # Returns the value of attribute parsed_config.
  #
  # source://eye//lib/eye/dsl/main.rb#3
  def parsed_config; end

  # Sets the attribute parsed_config
  #
  # @param value the value to set the attribute parsed_config to.
  #
  # source://eye//lib/eye/dsl/main.rb#3
  def parsed_config=(_arg0); end

  # Returns the value of attribute parsed_default_app.
  #
  # source://eye//lib/eye/dsl/main.rb#3
  def parsed_default_app; end

  # Sets the attribute parsed_default_app
  #
  # @param value the value to set the attribute parsed_default_app to.
  #
  # source://eye//lib/eye/dsl/main.rb#3
  def parsed_default_app=(_arg0); end

  # Returns the value of attribute parsed_filename.
  #
  # source://eye//lib/eye/dsl/main.rb#3
  def parsed_filename; end

  # Sets the attribute parsed_filename
  #
  # @param value the value to set the attribute parsed_filename to.
  #
  # source://eye//lib/eye/dsl/main.rb#3
  def parsed_filename=(_arg0); end

  # source://eye//lib/eye/dsl/main.rb#5
  def project(name, &block); end

  # source://eye//lib/eye/dsl/main.rb#47
  def settings(&block); end

  # source://eye//lib/eye/dsl/main.rb#59
  def shared; end
end

# source://eye//lib/eye/dsl/opts.rb#1
class Eye::Dsl::Opts < ::Eye::Dsl::PureOpts
  # @return [Opts] a new instance of Opts
  #
  # source://eye//lib/eye/dsl/opts.rb#19
  def initialize(name = T.unsafe(nil), parent = T.unsafe(nil)); end

  # @raise [Eye::Dsl::Error]
  #
  # source://eye//lib/eye/dsl/opts.rb#29
  def check(type, opts = T.unsafe(nil)); end

  # @raise [Eye::Dsl::Error]
  #
  # source://eye//lib/eye/dsl/opts.rb#29
  def checks(type, opts = T.unsafe(nil)); end

  # source://eye//lib/eye/dsl/opts.rb#146
  def clear_bundler_env; end

  # source://eye//lib/eye/dsl/opts.rb#70
  def command(cmd, arg); end

  # source://eye//lib/eye/dsl/opts.rb#142
  def daemonize!; end

  # source://eye//lib/eye/dsl/pure_opts.rb#25
  def dir(*args); end

  # source://eye//lib/eye/dsl/pure_opts.rb#25
  def env(*args); end

  # source://eye//lib/eye/dsl/opts.rb#182
  def load_env(filename = T.unsafe(nil), raise_when_no_file = T.unsafe(nil)); end

  # clear checks from parent
  #
  # @raise [Eye::Dsl::Error]
  #
  # source://eye//lib/eye/dsl/opts.rb#52
  def nocheck(type); end

  # clear checks from parent
  #
  # @raise [Eye::Dsl::Error]
  #
  # source://eye//lib/eye/dsl/opts.rb#52
  def nochecks(type); end

  # source://eye//lib/eye/dsl/opts.rb#92
  def nonotify(contact); end

  # source://eye//lib/eye/dsl/opts.rb#83
  def notify(contact, level = T.unsafe(nil)); end

  # clear triggers from parent
  #
  # @raise [Eye::Dsl::Error]
  #
  # source://eye//lib/eye/dsl/opts.rb#59
  def notrigger(type); end

  # clear triggers from parent
  #
  # @raise [Eye::Dsl::Error]
  #
  # source://eye//lib/eye/dsl/opts.rb#59
  def notriggers(type); end

  # source://eye//lib/eye/dsl/opts.rb#150
  def scoped(&block); end

  # @raise [Eye::Dsl::Error]
  #
  # source://eye//lib/eye/dsl/opts.rb#116
  def set_environment(value); end

  # @raise [Eye::Dsl::Error]
  #
  # source://eye//lib/eye/dsl/opts.rb#137
  def set_gid(value); end

  # source://eye//lib/eye/dsl/opts.rb#125
  def set_stdall(value); end

  # @raise [Eye::Dsl::Error]
  #
  # source://eye//lib/eye/dsl/opts.rb#97
  def set_stop_command(cmd); end

  # @raise [Eye::Dsl::Error]
  #
  # source://eye//lib/eye/dsl/opts.rb#132
  def set_uid(value); end

  # source://eye//lib/eye/dsl/opts.rb#197
  def skip_group_action(act, val = T.unsafe(nil)); end

  # @raise [Eye::Dsl::Error]
  #
  # source://eye//lib/eye/dsl/opts.rb#102
  def stop_signals(*args); end

  # source://eye//lib/eye/dsl/opts.rb#112
  def stop_signals=(s); end

  # source://eye//lib/eye/dsl/opts.rb#202
  def syslog; end

  # @raise [Eye::Dsl::Error]
  #
  # source://eye//lib/eye/dsl/opts.rb#40
  def trigger(type, opts = T.unsafe(nil)); end

  # @raise [Eye::Dsl::Error]
  #
  # source://eye//lib/eye/dsl/opts.rb#40
  def triggers(type, opts = T.unsafe(nil)); end

  # execute part of config on particular server
  # array of strings
  # regexp
  # string
  #
  # source://eye//lib/eye/dsl/opts.rb#160
  def with_server(glob = T.unsafe(nil), &block); end

  private

  # @raise [Eye::Dsl::Error]
  #
  # source://eye//lib/eye/dsl/opts.rb#208
  def validate_signals(signals = T.unsafe(nil)); end
end

# source://eye//lib/eye/dsl/opts.rb#7
Eye::Dsl::Opts::BOOL_OPTIONS = T.let(T.unsafe(nil), Array)

# source://eye//lib/eye/dsl/opts.rb#11
Eye::Dsl::Opts::INTERVAL_OPTIONS = T.let(T.unsafe(nil), Array)

# source://eye//lib/eye/dsl/opts.rb#3
Eye::Dsl::Opts::STR_OPTIONS = T.let(T.unsafe(nil), Array)

# source://eye//lib/eye/dsl/process_opts.rb#1
class Eye::Dsl::ProcessOpts < ::Eye::Dsl::Opts
  # source://eye//lib/eye/dsl/process_opts.rb#12
  def app; end

  # source://eye//lib/eye/dsl/process_opts.rb#12
  def application; end

  # source://eye//lib/eye/dsl/process_opts.rb#18
  def depend_on(names, opts = T.unsafe(nil)); end

  # source://eye//lib/eye/dsl/pure_opts.rb#44
  def group; end

  # source://eye//lib/eye/dsl/process_opts.rb#3
  def monitor_children(&block); end

  # source://eye//lib/eye/dsl/pure_opts.rb#102
  def xmonitor_children(*args, &block); end

  private

  # source://eye//lib/eye/dsl/process_opts.rb#33
  def unique_num; end

  class << self
    # Returns the value of attribute unique_num.
    #
    # source://eye//lib/eye/dsl/process_opts.rb#40
    def unique_num; end

    # Sets the attribute unique_num
    #
    # @param value the value to set the attribute unique_num to.
    #
    # source://eye//lib/eye/dsl/process_opts.rb#40
    def unique_num=(_arg0); end
  end
end

# source://eye//lib/eye/dsl/pure_opts.rb#1
class Eye::Dsl::PureOpts
  # @return [PureOpts] a new instance of PureOpts
  #
  # source://eye//lib/eye/dsl/pure_opts.rb#46
  def initialize(name = T.unsafe(nil), parent = T.unsafe(nil), merge_parent_config = T.unsafe(nil)); end

  # source://eye//lib/eye/dsl/pure_opts.rb#66
  def allow_options; end

  # Returns the value of attribute config.
  #
  # source://eye//lib/eye/dsl/pure_opts.rb#44
  def config; end

  # source://eye//lib/eye/dsl/pure_opts.rb#70
  def disallow_options; end

  # Returns the value of attribute full_name.
  #
  # source://eye//lib/eye/dsl/pure_opts.rb#43
  def full_name; end

  # Returns the value of attribute name.
  #
  # source://eye//lib/eye/dsl/pure_opts.rb#43
  def name; end

  # source://eye//lib/eye/dsl/pure_opts.rb#102
  def nop(*args, &block); end

  # source://eye//lib/eye/dsl/pure_opts.rb#74
  def not_seed_options; end

  # Returns the value of attribute parent.
  #
  # source://eye//lib/eye/dsl/pure_opts.rb#44
  def parent; end

  # source://eye//lib/eye/dsl/pure_opts.rb#82
  def use(proc, *args); end

  # source://eye//lib/eye/dsl/pure_opts.rb#78
  def with_condition(cond = T.unsafe(nil), &block); end

  class << self
    # source://eye//lib/eye/dsl/pure_opts.rb#3
    def create_options_methods(arr, types = T.unsafe(nil)); end

    # source://eye//lib/eye/dsl/pure_opts.rb#104
    def with_parsed_file(file_name); end
  end
end

# source://eye//lib/eye/dsl/validation.rb#1
module Eye::Dsl::Validation
  mixes_in_class_methods ::Eye::Dsl::Validation::ClassMethods

  class << self
    # @private
    #
    # source://eye//lib/eye/dsl/validation.rb#3
    def included(base); end
  end
end

# source://eye//lib/eye/dsl/validation.rb#9
module Eye::Dsl::Validation::ClassMethods
  # Returns the value of attribute defaults.
  #
  # source://eye//lib/eye/dsl/validation.rb#28
  def defaults; end

  # Sets the attribute defaults
  #
  # @param value the value to set the attribute defaults to.
  #
  # source://eye//lib/eye/dsl/validation.rb#18
  def defaults=(_arg0); end

  # source://eye//lib/eye/dsl/validation.rb#61
  def del_param(param); end

  # source://eye//lib/eye/dsl/validation.rb#11
  def inherited(subclass); end

  # source://eye//lib/eye/dsl/validation.rb#36
  def param(param, types = T.unsafe(nil), should_be = T.unsafe(nil), default = T.unsafe(nil), variants = T.unsafe(nil)); end

  # source://eye//lib/eye/dsl/validation.rb#56
  def param_default(param, default); end

  # Returns the value of attribute should_bes.
  #
  # source://eye//lib/eye/dsl/validation.rb#24
  def should_bes; end

  # Sets the attribute should_bes
  #
  # @param value the value to set the attribute should_bes to.
  #
  # source://eye//lib/eye/dsl/validation.rb#18
  def should_bes=(_arg0); end

  # source://eye//lib/eye/dsl/validation.rb#70
  def validate(options = T.unsafe(nil)); end

  # source://eye//lib/eye/dsl/validation.rb#78
  def validate_param(param, value); end

  # Returns the value of attribute validates.
  #
  # source://eye//lib/eye/dsl/validation.rb#20
  def validates; end

  # Sets the attribute validates
  #
  # @param value the value to set the attribute validates to.
  #
  # source://eye//lib/eye/dsl/validation.rb#18
  def validates=(_arg0); end

  # Returns the value of attribute variants.
  #
  # source://eye//lib/eye/dsl/validation.rb#32
  def variants; end

  # Sets the attribute variants
  #
  # @param value the value to set the attribute variants to.
  #
  # source://eye//lib/eye/dsl/validation.rb#18
  def variants=(_arg0); end
end

# source://eye//lib/eye/dsl/validation.rb#7
class Eye::Dsl::Validation::Error < ::RuntimeError; end

# source://eye//lib/eye/group.rb#3
class Eye::Group
  include ::Celluloid
  include ::Celluloid::InstanceMethods
  include ::Eye::Process::Scheduler
  include ::Eye::Group::Call
  include ::Eye::Group::Chain
  include ::Eye::Group::Data
  extend ::Celluloid::ClassMethods
  extend ::Celluloid::Internals::Properties

  # @return [Group] a new instance of Group
  #
  # source://eye//lib/eye/group.rb#18
  def initialize(name, config); end

  # to sort groups
  #
  # source://eye//lib/eye/group.rb#56
  def <=>(other); end

  # source://eye//lib/eye/group.rb#38
  def add_process(process); end

  # source://eye//lib/eye/group.rb#30
  def app_name; end

  # source://eye//lib/eye/group.rb#47
  def clear; end

  # Returns the value of attribute config.
  #
  # source://eye//lib/eye/group.rb#16
  def config; end

  # source://eye//lib/eye/group.rb#34
  def full_name; end

  # Returns the value of attribute hidden.
  #
  # source://eye//lib/eye/group.rb#16
  def hidden; end

  # source://eye//lib/eye/group.rb#26
  def logger_tag; end

  # Returns the value of attribute name.
  #
  # source://eye//lib/eye/group.rb#16
  def name; end

  # Returns the value of attribute processes.
  #
  # source://eye//lib/eye/group.rb#16
  def processes; end

  # sort processes in name order
  #
  # source://eye//lib/eye/group.rb#43
  def resort_processes; end

  # @return [Boolean]
  #
  # source://eye//lib/eye/group.rb#51
  def sub_object?(obj); end

  class << self
    # source://celluloid/0.17.4/lib/celluloid.rb#71
    def exclusive(*args); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def exclusive_actor(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def exclusive_methods(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def execute_block_on_receiver(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def exit_handler_name(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def finalizer(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def group_class(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def mailbox_class(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def mailbox_size(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def proxy_class(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def task_class(value = T.unsafe(nil), *extra); end

    # source://celluloid/0.17.4/lib/celluloid.rb#67
    def trap_exit(*args); end
  end
end

# source://eye//lib/eye/group/call.rb#1
module Eye::Group::Call
  # source://eye//lib/eye/group/call.rb#55
  def break_chain; end

  # source://eye//lib/eye/group/call.rb#34
  def delete; end

  # source://eye//lib/eye/group/call.rb#39
  def monitor; end

  # source://eye//lib/eye/group/call.rb#30
  def restart; end

  # :update_config, :start, :stop, :restart, :unmonitor, :monitor, :break_chain, :delete, :signal, :user_command
  #
  # source://eye//lib/eye/group/call.rb#4
  def send_call(call); end

  # source://eye//lib/eye/group/call.rb#47
  def signal(sig); end

  # source://eye//lib/eye/group/call.rb#22
  def start; end

  # source://eye//lib/eye/group/call.rb#26
  def stop; end

  # source://eye//lib/eye/group/call.rb#43
  def unmonitor; end

  # source://eye//lib/eye/group/call.rb#17
  def update_config(cfg); end

  # source://eye//lib/eye/group/call.rb#51
  def user_command(cmd); end

  private

  # source://eye//lib/eye/group/call.rb#63
  def fast_call(call); end
end

# source://eye//lib/eye/group/chain.rb#1
module Eye::Group::Chain
  private

  # source://eye//lib/eye/group/chain.rb#71
  def chain_options(command); end

  # source://eye//lib/eye/group/chain.rb#10
  def chain_schedule(type, grace, call); end

  # source://eye//lib/eye/group/chain.rb#47
  def chain_schedule_process(process, type, call); end

  # source://eye//lib/eye/group/chain.rb#62
  def chain_status; end

  # source://eye//lib/eye/group/chain.rb#5
  def chained_call(call); end
end

# with such delay will chained processes by default
#
# source://eye//lib/eye/group/chain.rb#69
Eye::Group::Chain::DEFAULT_CHAIN = T.let(T.unsafe(nil), Float)

# source://eye//lib/eye/group/data.rb#1
module Eye::Group::Data
  # source://eye//lib/eye/group/data.rb#36
  def debug_data; end

  # source://eye//lib/eye/group/data.rb#3
  def status_data(opts = T.unsafe(nil)); end

  # source://eye//lib/eye/group/data.rb#26
  def status_data_short; end
end

# source://eye//lib/eye/local.rb#3
module Eye::Local
  class << self
    # source://eye//lib/eye/local.rb#57
    def cache_path; end

    # source://eye//lib/eye/local.rb#65
    def client_timeout; end

    # Sets the attribute client_timeout
    #
    # @param value the value to set the attribute client_timeout to.
    #
    # source://eye//lib/eye/local.rb#21
    def client_timeout=(_arg0); end

    # source://eye//lib/eye/local.rb#61
    def default_client_timeout; end

    # source://eye//lib/eye/local.rb#7
    def dir; end

    # Sets the attribute dir
    #
    # @param value the value to set the attribute dir to.
    #
    # source://eye//lib/eye/local.rb#21
    def dir=(_arg0); end

    # source://eye//lib/eye/local.rb#45
    def ensure_eye_dir; end

    # source://eye//lib/eye/local.rb#27
    def eyeconfig; end

    # source://eye//lib/eye/local.rb#80
    def eyefile; end

    # source://eye//lib/eye/local.rb#84
    def find_eyefile(start_from_dir); end

    # source://eye//lib/eye/local.rb#23
    def global_eyeconfig; end

    # source://eye//lib/eye/local.rb#35
    def home; end

    # source://eye//lib/eye/local.rb#73
    def host; end

    # Sets the attribute host
    #
    # @param value the value to set the attribute host to.
    #
    # source://eye//lib/eye/local.rb#21
    def host=(_arg0); end

    # Returns the value of attribute local_runner.
    #
    # source://eye//lib/eye/local.rb#99
    def local_runner; end

    # Sets the attribute local_runner
    #
    # @param value the value to set the attribute local_runner to.
    #
    # source://eye//lib/eye/local.rb#99
    def local_runner=(_arg0); end

    # source://eye//lib/eye/local.rb#41
    def path(path); end

    # source://eye//lib/eye/local.rb#53
    def pid_path; end

    # @return [Boolean]
    #
    # source://eye//lib/eye/local.rb#31
    def root?; end

    # source://eye//lib/eye/local.rb#49
    def socket_path; end

    # @return [Boolean]
    #
    # source://eye//lib/eye/local.rb#69
    def supported_setsid?; end
  end
end

# source://eye//lib/eye/logger.rb#3
class Eye::Logger
  # @return [Logger] a new instance of Logger
  #
  # source://eye//lib/eye/logger.rb#58
  def initialize(prefix = T.unsafe(nil), subprefix = T.unsafe(nil)); end

  # source://eye//lib/eye/logger.rb#49
  def debug(msg = T.unsafe(nil), &block); end

  # source://eye//lib/eye/logger.rb#49
  def error(msg = T.unsafe(nil), &block); end

  # source://eye//lib/eye/logger.rb#49
  def fatal(msg = T.unsafe(nil), &block); end

  # source://eye//lib/eye/logger.rb#49
  def info(msg = T.unsafe(nil), &block); end

  # Returns the value of attribute prefix.
  #
  # source://eye//lib/eye/logger.rb#5
  def prefix; end

  # Sets the attribute prefix
  #
  # @param value the value to set the attribute prefix to.
  #
  # source://eye//lib/eye/logger.rb#5
  def prefix=(_arg0); end

  # Returns the value of attribute subprefix.
  #
  # source://eye//lib/eye/logger.rb#5
  def subprefix; end

  # Sets the attribute subprefix
  #
  # @param value the value to set the attribute subprefix to.
  #
  # source://eye//lib/eye/logger.rb#5
  def subprefix=(_arg0); end

  # source://eye//lib/eye/logger.rb#49
  def unknown(msg = T.unsafe(nil), &block); end

  # source://eye//lib/eye/logger.rb#49
  def warn(msg = T.unsafe(nil), &block); end

  private

  # source://eye//lib/eye/logger.rb#107
  def prefix_str; end

  class << self
    # Returns the value of attribute args.
    #
    # source://eye//lib/eye/logger.rb#65
    def args; end

    # Returns the value of attribute dev.
    #
    # source://eye//lib/eye/logger.rb#65
    def dev; end

    # source://eye//lib/eye/logger.rb#99
    def inner_logger; end

    # source://eye//lib/eye/logger.rb#67
    def link_logger(dev, *args); end

    # Returns the value of attribute log_level.
    #
    # source://eye//lib/eye/logger.rb#65
    def log_level; end

    # source://eye//lib/eye/logger.rb#94
    def log_level=(level); end

    # source://eye//lib/eye/logger.rb#90
    def reopen; end
  end
end

# source://eye//lib/eye/logger.rb#7
class Eye::Logger::InnerLogger < ::Logger
  # @return [InnerLogger] a new instance of InnerLogger
  #
  # source://eye//lib/eye/logger.rb#11
  def initialize(*args); end
end

# source://eye//lib/eye/logger.rb#9
Eye::Logger::InnerLogger::FORMAT = T.let(T.unsafe(nil), String)

# source://eye//lib/eye/logger.rb#21
module Eye::Logger::ObjectExt
  # source://eye//lib/eye/logger.rb#35
  def debug(msg = T.unsafe(nil), &block); end

  # source://eye//lib/eye/logger.rb#35
  def error(msg = T.unsafe(nil), &block); end

  # source://eye//lib/eye/logger.rb#35
  def fatal(msg = T.unsafe(nil), &block); end

  # source://eye//lib/eye/logger.rb#35
  def info(msg = T.unsafe(nil), &block); end

  # source://eye//lib/eye/logger.rb#40
  def log_ex(ex); end

  # source://eye//lib/eye/logger.rb#29
  def logger; end

  # source://eye//lib/eye/logger.rb#27
  def logger_sub_tag; end

  # source://eye//lib/eye/logger.rb#23
  def logger_tag; end

  # source://eye//lib/eye/logger.rb#35
  def unknown(msg = T.unsafe(nil), &block); end

  # source://eye//lib/eye/logger.rb#35
  def warn(msg = T.unsafe(nil), &block); end
end

# source://eye//lib/eye/notify.rb#3
class Eye::Notify
  include ::Celluloid
  include ::Celluloid::InstanceMethods
  include ::Eye::Dsl::Validation
  extend ::Celluloid::ClassMethods
  extend ::Celluloid::Internals::Properties
  extend ::Eye::Dsl::Validation::ClassMethods

  # @return [Notify] a new instance of Notify
  #
  # source://eye//lib/eye/notify.rb#56
  def initialize(options = T.unsafe(nil), message_h = T.unsafe(nil)); end

  # source://eye//lib/eye/notify.rb#67
  def async_notify; end

  # source://eye//lib/eye/dsl/validation.rb#46
  def contact; end

  # source://eye//lib/eye/dsl/validation.rb#51
  def contact=(value); end

  # @raise [NotImplementedError]
  #
  # source://eye//lib/eye/notify.rb#79
  def execute; end

  # source://eye//lib/eye/notify.rb#63
  def logger_sub_tag; end

  # source://eye//lib/eye/notify.rb#89
  def message_body; end

  # source://eye//lib/eye/notify.rb#85
  def message_subject; end

  # source://eye//lib/eye/notify.rb#113
  def msg_at; end

  # source://eye//lib/eye/notify.rb#113
  def msg_full_name; end

  # source://eye//lib/eye/notify.rb#113
  def msg_host; end

  # source://eye//lib/eye/notify.rb#113
  def msg_level; end

  # source://eye//lib/eye/notify.rb#113
  def msg_message; end

  # source://eye//lib/eye/notify.rb#113
  def msg_name; end

  # source://eye//lib/eye/notify.rb#113
  def msg_pid; end

  # source://eye//lib/eye/notify.rb#72
  def notify; end

  class << self
    # source://celluloid/0.17.4/lib/celluloid.rb#71
    def exclusive(*args); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def exclusive_actor(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def exclusive_methods(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def execute_block_on_receiver(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def exit_handler_name(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def finalizer(value = T.unsafe(nil), *extra); end

    # source://eye//lib/eye/notify.rb#14
    def get_class(type); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def group_class(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def mailbox_class(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def mailbox_size(value = T.unsafe(nil), *extra); end

    # source://eye//lib/eye/notify.rb#27
    def notify(contact, message_h); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def proxy_class(value = T.unsafe(nil), *extra); end

    # source://eye//lib/eye/notify.rb#93
    def register(base); end

    # source://eye//lib/eye/notify.rb#101
    def requires; end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def task_class(value = T.unsafe(nil), *extra); end

    # source://celluloid/0.17.4/lib/celluloid.rb#67
    def trap_exit(*args); end

    # source://eye//lib/eye/notify.rb#23
    def validate!(options); end
  end
end

# source://eye//lib/eye/notify.rb#103
class Eye::Notify::Custom < ::Eye::Notify
  class << self
    # @private
    #
    # source://eye//lib/eye/notify.rb#105
    def inherited(base); end
  end
end

# source://eye//lib/eye/notify/mail.rb#3
class Eye::Notify::Mail < ::Eye::Notify
  # source://eye//lib/eye/dsl/validation.rb#46
  def auth; end

  # source://eye//lib/eye/dsl/validation.rb#51
  def auth=(value); end

  # source://eye//lib/eye/dsl/validation.rb#46
  def domain; end

  # source://eye//lib/eye/dsl/validation.rb#51
  def domain=(value); end

  # source://eye//lib/eye/notify/mail.rb#23
  def execute; end

  # source://eye//lib/eye/dsl/validation.rb#46
  def from_mail; end

  # source://eye//lib/eye/dsl/validation.rb#51
  def from_mail=(value); end

  # source://eye//lib/eye/dsl/validation.rb#46
  def from_name; end

  # source://eye//lib/eye/dsl/validation.rb#51
  def from_name=(value); end

  # source://eye//lib/eye/dsl/validation.rb#46
  def host; end

  # source://eye//lib/eye/dsl/validation.rb#51
  def host=(value); end

  # source://eye//lib/eye/notify/mail.rb#38
  def message; end

  # source://eye//lib/eye/dsl/validation.rb#46
  def password; end

  # source://eye//lib/eye/dsl/validation.rb#51
  def password=(value); end

  # source://eye//lib/eye/dsl/validation.rb#46
  def port; end

  # source://eye//lib/eye/dsl/validation.rb#51
  def port=(value); end

  # source://eye//lib/eye/notify/mail.rb#27
  def smtp; end

  # source://eye//lib/eye/dsl/validation.rb#46
  def starttls; end

  # source://eye//lib/eye/dsl/validation.rb#51
  def starttls=(value); end

  # source://eye//lib/eye/dsl/validation.rb#46
  def user; end

  # source://eye//lib/eye/dsl/validation.rb#51
  def user=(value); end
end

# source://eye//lib/eye/notify.rb#54
Eye::Notify::TIMEOUT = T.let(T.unsafe(nil), Integer)

# source://eye//lib/eye/notify.rb#12
Eye::Notify::TYPES = T.let(T.unsafe(nil), Hash)

# source://eye//lib/eye.rb#4
Eye::PROCLINE = T.let(T.unsafe(nil), String)

# source://eye//lib/eye/process.rb#3
class Eye::Process
  include ::Celluloid
  include ::Celluloid::InstanceMethods
  include ::Eye::Process::Config
  include ::Eye::Process::Data
  include ::Eye::Process::Commands
  include ::Eye::Process::Controller
  include ::Eye::Process::Watchers
  include ::Eye::Process::Monitor
  include ::Eye::Process::System
  include ::Eye::Process::Children
  include ::Eye::Process::Trigger
  include ::Eye::Process::Notify
  include ::Eye::Process::Scheduler
  include ::StateMachines::InstanceMethods
  extend ::Celluloid::ClassMethods
  extend ::Celluloid::Internals::Properties
  extend ::Eye::Process::Validate
  extend ::StateMachines::ClassMethods

  # @return [Process] a new instance of Process
  #
  # source://eye//lib/eye/process.rb#25
  def initialize(config); end

  # Returns the value of attribute children.
  #
  # source://eye//lib/eye/process.rb#21
  def children; end

  # Sets the attribute children
  #
  # @param value the value to set the attribute children to.
  #
  # source://eye//lib/eye/process.rb#21
  def children=(_arg0); end

  # Returns the value of attribute config.
  #
  # source://eye//lib/eye/process.rb#21
  def config; end

  # Sets the attribute config
  #
  # @param value the value to set the attribute config to.
  #
  # source://eye//lib/eye/process.rb#21
  def config=(_arg0); end

  # source://eye//lib/eye/process/states.rb#81
  def log_transition(transition); end

  # Returns the value of attribute name.
  #
  # source://eye//lib/eye/process.rb#21
  def name; end

  # Sets the attribute name
  #
  # @param value the value to set the attribute name to.
  #
  # source://eye//lib/eye/process.rb#21
  def name=(_arg0); end

  # source://eye//lib/eye/process/states.rb#72
  def on_crashed; end

  # source://eye//lib/eye/process/states.rb#77
  def on_unmonitored; end

  # Returns the value of attribute parent_pid.
  #
  # source://eye//lib/eye/process.rb#21
  def parent_pid; end

  # Sets the attribute parent_pid
  #
  # @param value the value to set the attribute parent_pid to.
  #
  # source://eye//lib/eye/process.rb#21
  def parent_pid=(_arg0); end

  # Returns the value of attribute pid.
  #
  # source://eye//lib/eye/process.rb#21
  def pid; end

  # Sets the attribute pid
  #
  # @param value the value to set the attribute pid to.
  #
  # source://eye//lib/eye/process.rb#21
  def pid=(_arg0); end

  # Returns the value of attribute state_reason.
  #
  # source://eye//lib/eye/process.rb#21
  def state_reason; end

  # Sets the attribute state_reason
  #
  # @param value the value to set the attribute state_reason to.
  #
  # source://eye//lib/eye/process.rb#21
  def state_reason=(_arg0); end

  # Returns the value of attribute states_history.
  #
  # source://eye//lib/eye/process.rb#21
  def states_history; end

  # Sets the attribute states_history
  #
  # @param value the value to set the attribute states_history to.
  #
  # source://eye//lib/eye/process.rb#21
  def states_history=(_arg0); end

  # do transition
  #
  # source://eye//lib/eye/process/states.rb#9
  def switch(name, call = T.unsafe(nil)); end

  # Returns the value of attribute triggers.
  #
  # source://eye//lib/eye/process.rb#21
  def triggers; end

  # Sets the attribute triggers
  #
  # @param value the value to set the attribute triggers to.
  #
  # source://eye//lib/eye/process.rb#21
  def triggers=(_arg0); end

  # Returns the value of attribute watchers.
  #
  # source://eye//lib/eye/process.rb#21
  def watchers; end

  # Sets the attribute watchers
  #
  # @param value the value to set the attribute watchers to.
  #
  # source://eye//lib/eye/process.rb#21
  def watchers=(_arg0); end

  class << self
    # source://celluloid/0.17.4/lib/celluloid.rb#71
    def exclusive(*args); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def exclusive_actor(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def exclusive_methods(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def execute_block_on_receiver(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def exit_handler_name(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def finalizer(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def group_class(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def mailbox_class(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def mailbox_size(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def proxy_class(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def task_class(value = T.unsafe(nil), *extra); end

    # source://celluloid/0.17.4/lib/celluloid.rb#67
    def trap_exit(*args); end
  end
end

# source://eye//lib/eye/process/children.rb#1
module Eye::Process::Children
  # source://eye//lib/eye/process/children.rb#3
  def add_children; end

  # source://eye//lib/eye/process/children.rb#7
  def add_or_update_children; end

  # source://eye//lib/eye/process/children.rb#59
  def clear_child(child_pid); end

  # source://eye//lib/eye/process/children.rb#55
  def remove_child(child_pid); end

  # source://eye//lib/eye/process/children.rb#50
  def remove_children; end
end

# source://eye//lib/eye/process/commands.rb#1
module Eye::Process::Commands
  # source://eye//lib/eye/process/commands.rb#67
  def restart_process; end

  # source://eye//lib/eye/process/commands.rb#3
  def start_process; end

  # source://eye//lib/eye/process/commands.rb#39
  def stop_process; end

  private

  # source://eye//lib/eye/process/commands.rb#252
  def check_logs_str; end

  # source://eye//lib/eye/process/commands.rb#163
  def daemonize_process; end

  # source://eye//lib/eye/process/commands.rb#211
  def execute_process; end

  # source://eye//lib/eye/process/commands.rb#140
  def execute_restart_command; end

  # source://eye//lib/eye/process/commands.rb#274
  def execute_user_command(name, cmd); end

  # source://eye//lib/eye/process/commands.rb#93
  def kill_process; end

  # source://eye//lib/eye/process/commands.rb#260
  def prepare_command(command); end

  # source://eye//lib/eye/process/commands.rb#268
  def sleep_grace(grace_name); end
end

# source://eye//lib/eye/process/config.rb#1
module Eye::Process::Config
  # source://eye//lib/eye/process/config.rb#58
  def [](name); end

  # source://eye//lib/eye/process/config.rb#54
  def c(name); end

  # is pid_file under Eye::Process control, or not
  #
  # @return [Boolean]
  #
  # source://eye//lib/eye/process/config.rb#84
  def control_pid?; end

  # source://eye//lib/eye/process/config.rb#29
  def prepare_config(new_config); end

  # @return [Boolean]
  #
  # source://eye//lib/eye/process/config.rb#88
  def skip_group_action?(action); end

  # source://eye//lib/eye/process/config.rb#62
  def update_config(new_config = T.unsafe(nil)); end
end

# source://eye//lib/eye/process/config.rb#3
Eye::Process::Config::DEFAULTS = T.let(T.unsafe(nil), Hash)

# source://eye//lib/eye/process/controller.rb#1
module Eye::Process::Controller
  # source://eye//lib/eye/process/controller.rb#39
  def delete; end

  # source://eye//lib/eye/process/controller.rb#25
  def monitor; end

  # source://eye//lib/eye/process/controller.rb#20
  def restart; end

  # source://eye//lib/eye/process/controller.rb#52
  def signal(sig = T.unsafe(nil)); end

  # scheduled actions
  # :update_config, :start, :stop, :restart, :unmonitor, :monitor, :break_chain, :delete, :signal, :user_command
  #
  # source://eye//lib/eye/process/controller.rb#6
  def start; end

  # source://eye//lib/eye/process/controller.rb#15
  def stop; end

  # source://eye//lib/eye/process/controller.rb#35
  def unmonitor; end

  # source://eye//lib/eye/process/controller.rb#56
  def user_command(name); end
end

# source://eye//lib/eye/process/data.rb#1
module Eye::Process::Data
  # source://eye//lib/eye/process/data.rb#7
  def app_name; end

  # source://eye//lib/eye/process/data.rb#54
  def debug_data; end

  # source://eye//lib/eye/process/data.rb#72
  def environment_string; end

  # source://eye//lib/eye/process/data.rb#19
  def full_name; end

  # source://eye//lib/eye/process/data.rb#11
  def group_name; end

  # source://eye//lib/eye/process/data.rb#15
  def group_name_pure; end

  # source://eye//lib/eye/process/data.rb#3
  def logger_tag; end

  # source://eye//lib/eye/process/data.rb#36
  def self_status_data(opts); end

  # source://eye//lib/eye/process/data.rb#78
  def shell_string(dir = T.unsafe(nil)); end

  # source://eye//lib/eye/process/data.rb#23
  def status_data(opts = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://eye//lib/eye/process/data.rb#66
  def sub_object?(obj); end

  # source://eye//lib/eye/process/data.rb#58
  def timers_data; end
end

# source://eye//lib/eye/process/monitor.rb#1
module Eye::Process::Monitor
  private

  # source://eye//lib/eye/process/monitor.rb#31
  def check_alive; end

  # source://eye//lib/eye/process/monitor.rb#94
  def check_crash; end

  # source://eye//lib/eye/process/monitor.rb#83
  def check_identity; end

  # source://eye//lib/eye/process/monitor.rb#46
  def check_pid_file; end

  # source://eye//lib/eye/process/monitor.rb#5
  def load_external_pid_file; end

  # source://eye//lib/eye/process/monitor.rb#114
  def restore; end
end

# source://eye//lib/eye/process/notify.rb#1
module Eye::Process::Notify
  # source://eye//lib/eye/process/notify.rb#10
  def notify(level, msg); end

  private

  # source://eye//lib/eye/process/notify.rb#28
  def ilevel(level); end
end

# notify to user:
# 1) process crashed by itself, and we restart it [:info]
# 2) checker bounded to restart process [:warn]
# 3) flapping + switch to unmonitored [:error]
#
# source://eye//lib/eye/process/notify.rb#8
Eye::Process::Notify::LEVELS = T.let(T.unsafe(nil), Hash)

# source://eye//lib/eye/process/scheduler.rb#1
module Eye::Process::Scheduler
  # source://eye//lib/eye/process/scheduler.rb#115
  def ensure_scheduler_process; end

  # @return [Boolean]
  #
  # source://eye//lib/eye/process/scheduler.rb#98
  def equal_action_call?(call1, call2); end

  # source://eye//lib/eye/process/scheduler.rb#90
  def filter_call(call); end

  # source://eye//lib/eye/process/scheduler.rb#34
  def internal_schedule(call); end

  # 2 Forms of schedule:
  # schedule command: 'bla', args: [1, 2, 3]
  # schedule :bla, 1, 2, 3
  #
  # source://eye//lib/eye/process/scheduler.rb#26
  def schedule(*args); end

  # source://eye//lib/eye/process/scheduler.rb#110
  def scheduler_add(call); end

  # source://eye//lib/eye/process/scheduler.rb#102
  def scheduler_calls; end

  # source://eye//lib/eye/process/scheduler.rb#135
  def scheduler_clear_pending_list; end

  # source://eye//lib/eye/process/scheduler.rb#131
  def scheduler_commands_list; end

  # source://eye//lib/eye/process/scheduler.rb#70
  def scheduler_consume(call); end

  # source://eye//lib/eye/process/scheduler.rb#147
  def scheduler_current_command; end

  # source://eye//lib/eye/process/scheduler.rb#106
  def scheduler_history; end

  # source://eye//lib/eye/process/scheduler.rb#139
  def scheduler_last_command; end

  # source://eye//lib/eye/process/scheduler.rb#143
  def scheduler_last_reason; end

  # source://eye//lib/eye/process/scheduler.rb#122
  def scheduler_run; end

  # :update_config, :start, :stop, :restart, :unmonitor, :monitor, :break_chain, :delete, :signal, :user_command
  #
  # source://eye//lib/eye/process/scheduler.rb#14
  def send_call(call); end

  # source://eye//lib/eye/process/scheduler.rb#18
  def user_schedule(call); end

  private

  # source://eye//lib/eye/process/scheduler.rb#153
  def reason_from_call(call); end
end

# source://eye//lib/eye/process/states.rb#6
class Eye::Process::StateError < ::RuntimeError; end

# source://eye//lib/eye/process/states_history.rb#1
class Eye::Process::StatesHistory < ::Eye::Utils::Tail
  # source://eye//lib/eye/process/states_history.rb#26
  def last_reason; end

  # source://eye//lib/eye/process/states_history.rb#22
  def last_state; end

  # source://eye//lib/eye/process/states_history.rb#30
  def last_state_changed_at; end

  # source://eye//lib/eye/process/states_history.rb#3
  def push(state, reason = T.unsafe(nil), tm = T.unsafe(nil)); end

  # source://eye//lib/eye/process/states_history.rb#7
  def states; end

  # source://eye//lib/eye/process/states_history.rb#11
  def states_for_period(period, from_time = T.unsafe(nil), &block); end
end

# source://eye//lib/eye/process/system.rb#3
module Eye::Process::System
  # source://eye//lib/eye/process/system.rb#20
  def clear_pid_file(check_content = T.unsafe(nil)); end

  # source://eye//lib/eye/process/system.rb#39
  def compare_identity(pid = T.unsafe(nil)); end

  # source://eye//lib/eye/process/system.rb#97
  def daemonize(cmd, cfg = T.unsafe(nil)); end

  # source://eye//lib/eye/process/system.rb#91
  def execute(cmd, cfg = T.unsafe(nil)); end

  # source://eye//lib/eye/process/system.rb#107
  def execute_async(cmd, opts = T.unsafe(nil)); end

  # source://eye//lib/eye/process/system.rb#101
  def execute_sync(cmd, opts = T.unsafe(nil)); end

  # source://eye//lib/eye/process/system.rb#132
  def expand_path(path); end

  # source://eye//lib/eye/process/system.rb#113
  def failsafe_load_pid; end

  # source://eye//lib/eye/process/system.rb#124
  def failsafe_save_pid; end

  # source://eye//lib/eye/process/system.rb#33
  def get_identity; end

  # source://eye//lib/eye/process/system.rb#5
  def load_pid_from_file; end

  # source://eye//lib/eye/process/system.rb#29
  def pid_file_ctime; end

  # @return [Boolean]
  #
  # source://eye//lib/eye/process/system.rb#63
  def process_pid_running?(pid); end

  # @return [Boolean]
  #
  # source://eye//lib/eye/process/system.rb#59
  def process_really_running?; end

  # source://eye//lib/eye/process/system.rb#9
  def save_pid_to_file; end

  # source://eye//lib/eye/process/system.rb#67
  def send_signal(code); end

  # source://eye//lib/eye/process/system.rb#77
  def wait_for_condition(timeout, step = T.unsafe(nil), &_block); end
end

# source://eye//lib/eye/process/trigger.rb#1
module Eye::Process::Trigger
  # source://eye//lib/eye/process/trigger.rb#3
  def add_triggers; end

  # source://eye//lib/eye/process/trigger.rb#11
  def check_triggers(transition); end

  # conditional start, used in triggers, to start only from unmonitored state, and only if special reason
  #
  # source://eye//lib/eye/process/trigger.rb#16
  def conditional_start; end

  # source://eye//lib/eye/process/trigger.rb#7
  def remove_triggers; end

  private

  # source://eye//lib/eye/process/trigger.rb#34
  def add_trigger(cfg = T.unsafe(nil)); end
end

# source://eye//lib/eye/process/validate.rb#4
module Eye::Process::Validate
  # source://eye//lib/eye/process/validate.rb#8
  def validate(config, localize = T.unsafe(nil)); end
end

# source://eye//lib/eye/process/validate.rb#6
class Eye::Process::Validate::Error < ::RuntimeError; end

# source://eye//lib/eye/process/watchers.rb#1
module Eye::Process::Watchers
  # source://eye//lib/eye/process/watchers.rb#3
  def add_watchers(force = T.unsafe(nil)); end

  # source://eye//lib/eye/process/watchers.rb#34
  def remove_watchers; end

  private

  # source://eye//lib/eye/process/watchers.rb#41
  def add_watcher(type, period = T.unsafe(nil), subject = T.unsafe(nil), &block); end

  # source://eye//lib/eye/process/watchers.rb#58
  def start_checker(name, cfg); end

  # source://eye//lib/eye/process/watchers.rb#54
  def start_checkers; end

  # source://eye//lib/eye/process/watchers.rb#64
  def watcher_tick(subject); end
end

# source://eye//lib/eye/server.rb#4
class Eye::Server
  include ::Celluloid::IO
  include ::Celluloid
  include ::Celluloid::InstanceMethods
  extend ::Celluloid::ClassMethods
  extend ::Celluloid::Internals::Properties

  # @return [Server] a new instance of Server
  #
  # source://eye//lib/eye/server.rb#10
  def initialize(socket_path); end

  # source://eye//lib/eye/server.rb#69
  def close_socket; end

  # source://eye//lib/eye/server.rb#24
  def handle_connection(socket); end

  # source://eye//lib/eye/server.rb#20
  def run; end

  # Returns the value of attribute server.
  #
  # source://eye//lib/eye/server.rb#8
  def server; end

  # Returns the value of attribute socket_path.
  #
  # source://eye//lib/eye/server.rb#8
  def socket_path; end

  # source://eye//lib/eye/server.rb#62
  def unlink_socket_file; end

  class << self
    # source://celluloid/0.17.4/lib/celluloid.rb#71
    def exclusive(*args); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def exclusive_actor(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def exclusive_methods(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def execute_block_on_receiver(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def exit_handler_name(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def finalizer(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def group_class(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def mailbox_class(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def mailbox_size(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def proxy_class(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def task_class(value = T.unsafe(nil), *extra); end

    # source://celluloid/0.17.4/lib/celluloid.rb#67
    def trap_exit(*args); end
  end
end

# source://eye//lib/eye/sigar.rb#2
Eye::Sigar = T.let(T.unsafe(nil), Sigar)

# source://eye//lib/eye/system.rb#5
module Eye::System
  class << self
    # Check that pid really exits
    # very fast
    # return result hash
    #
    # source://eye//lib/eye/system.rb#12
    def check_pid_alive(pid); end

    # Daemonize cmd, and detach
    # options:
    #   :pid_file
    #   :working_dir
    #   :environment
    #   :stdin, :stdout, :stderr
    #
    # source://eye//lib/eye/system.rb#63
    def daemonize(cmd, cfg = T.unsafe(nil)); end

    # Execute cmd with blocking, return status (be careful: inside actor blocks it mailbox, use with defer)
    # options
    #   :working_dir
    #   :environment
    #   :stdin, :stdout, :stderr
    #
    # source://eye//lib/eye/system.rb#80
    def execute(cmd, cfg = T.unsafe(nil)); end

    # normalize file
    #
    # source://eye//lib/eye/system.rb#108
    def normalized_file(file, working_dir = T.unsafe(nil)); end

    # Check that pid really exits
    # very fast
    # return true/false
    #
    # @return [Boolean]
    #
    # source://eye//lib/eye/system.rb#27
    def pid_alive?(pid); end

    # source://eye//lib/eye/system.rb#133
    def prepare_env(config = T.unsafe(nil)); end

    # Send signal to process (uses for kill)
    # code: TERM(15), KILL(9), QUIT(3), ...
    #
    # source://eye//lib/eye/system.rb#38
    def send_signal(pid, code = T.unsafe(nil)); end

    # source://eye//lib/eye/system.rb#112
    def spawn_options(config = T.unsafe(nil)); end
  end
end

# source://eye//lib/eye/system_resources.rb#3
class Eye::SystemResources
  class << self
    # source://eye//lib/eye/system_resources.rb#61
    def args(pid); end

    # source://eye//lib/eye/system_resources.rb#72
    def cache; end

    # source://eye//lib/eye/system_resources.rb#20
    def children(parent_pid); end

    # source://eye//lib/eye/system_resources.rb#14
    def cpu(pid); end

    # total cpu usage in seconds
    #
    # source://eye//lib/eye/system_resources.rb#32
    def cputime(pid); end

    # source://eye//lib/eye/system_resources.rb#48
    def deep_children(pid); end

    # last child in a children tree
    #
    # source://eye//lib/eye/system_resources.rb#39
    def leaf_child(pid); end

    # source://eye//lib/eye/system_resources.rb#8
    def memory(pid); end

    # source://eye//lib/eye/system_resources.rb#52
    def pid_or_children(pid); end

    # source://eye//lib/eye/system_resources.rb#65
    def resources(pid); end

    # unixtime
    #
    # source://eye//lib/eye/system_resources.rb#25
    def start_time(pid); end
  end
end

# source://eye//lib/eye/system_resources.rb#78
class Eye::SystemResources::Cache
  include ::Celluloid
  include ::Celluloid::InstanceMethods
  extend ::Celluloid::ClassMethods
  extend ::Celluloid::Internals::Properties

  # @return [Cache] a new instance of Cache
  #
  # source://eye//lib/eye/system_resources.rb#84
  def initialize; end

  # source://eye//lib/eye/system_resources.rb#115
  def children(pid); end

  # source://eye//lib/eye/system_resources.rb#95
  def clear; end

  # Returns the value of attribute expire.
  #
  # source://eye//lib/eye/system_resources.rb#82
  def expire; end

  # source://eye//lib/eye/system_resources.rb#108
  def proc_cpu(pid); end

  # source://eye//lib/eye/system_resources.rb#101
  def proc_mem(pid); end

  # source://eye//lib/eye/system_resources.rb#89
  def setup_expire(expire = T.unsafe(nil)); end

  class << self
    # source://celluloid/0.17.4/lib/celluloid.rb#71
    def exclusive(*args); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def exclusive_actor(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def exclusive_methods(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def execute_block_on_receiver(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def exit_handler_name(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def finalizer(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def group_class(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def mailbox_class(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def mailbox_size(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def proxy_class(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def task_class(value = T.unsafe(nil), *extra); end

    # source://celluloid/0.17.4/lib/celluloid.rb#67
    def trap_exit(*args); end
  end
end

# source://eye//lib/eye/trigger.rb#1
class Eye::Trigger
  include ::Eye::Dsl::Validation
  extend ::Eye::Dsl::Validation::ClassMethods

  # @return [Trigger] a new instance of Trigger
  #
  # source://eye//lib/eye/trigger.rb#48
  def initialize(process, options = T.unsafe(nil)); end

  # @raise [NotImplementedError]
  #
  # source://eye//lib/eye/trigger.rb#92
  def check(_transition); end

  # source://eye//lib/eye/trigger.rb#111
  def defer(&block); end

  # source://eye//lib/eye/dsl/validation.rb#46
  def event; end

  # source://eye//lib/eye/dsl/validation.rb#51
  def event=(value); end

  # source://eye//lib/eye/trigger.rb#100
  def exec_proc(name = T.unsafe(nil)); end

  # source://eye//lib/eye/trigger.rb#84
  def filter_transition(trans); end

  # source://eye//lib/eye/dsl/validation.rb#46
  def from; end

  # source://eye//lib/eye/dsl/validation.rb#51
  def from=(value); end

  # source://eye//lib/eye/trigger.rb#56
  def inspect; end

  # source://eye//lib/eye/trigger.rb#64
  def logger_sub_tag; end

  # source://eye//lib/eye/trigger.rb#60
  def logger_tag; end

  # Returns the value of attribute message.
  #
  # source://eye//lib/eye/trigger.rb#15
  def message; end

  # source://eye//lib/eye/trigger.rb#68
  def notify(transition, state_call); end

  # Returns the value of attribute options.
  #
  # source://eye//lib/eye/trigger.rb#15
  def options; end

  # Returns the value of attribute process.
  #
  # source://eye//lib/eye/trigger.rb#15
  def process; end

  # source://eye//lib/eye/trigger.rb#96
  def run_in_process_context(p); end

  # source://eye//lib/eye/dsl/validation.rb#46
  def to; end

  # source://eye//lib/eye/dsl/validation.rb#51
  def to=(value); end

  private

  # source://eye//lib/eye/trigger.rb#135
  def compare_state(state_name, condition); end

  class << self
    # source://eye//lib/eye/trigger.rb#36
    def create(process, options = T.unsafe(nil)); end

    # source://eye//lib/eye/trigger.rb#27
    def get_class(type); end

    # source://eye//lib/eye/trigger.rb#17
    def name_and_class(type); end

    # source://eye//lib/eye/trigger.rb#115
    def register(base); end

    # source://eye//lib/eye/trigger.rb#122
    def requires; end

    # source://eye//lib/eye/trigger.rb#44
    def validate!(options = T.unsafe(nil)); end
  end
end

# source://eye//lib/eye/trigger/check_dependency.rb#1
class Eye::Trigger::CheckDependency < ::Eye::Trigger
  # source://eye//lib/eye/trigger/check_dependency.rb#5
  def check(transition); end

  # source://eye//lib/eye/dsl/validation.rb#46
  def names; end

  # source://eye//lib/eye/dsl/validation.rb#51
  def names=(value); end

  private

  # source://eye//lib/eye/trigger/check_dependency.rb#11
  def check_dependency(to); end
end

# source://eye//lib/eye/trigger.rb#124
class Eye::Trigger::Custom < ::Eye::Trigger
  class << self
    # @private
    #
    # source://eye//lib/eye/trigger.rb#126
    def inherited(base); end
  end
end

# source://eye//lib/eye/trigger/flapping.rb#1
class Eye::Trigger::Flapping < ::Eye::Trigger
  # @return [Flapping] a new instance of Flapping
  #
  # source://eye//lib/eye/trigger/flapping.rb#13
  def initialize(*args); end

  # source://eye//lib/eye/trigger/flapping.rb#18
  def check(transition); end

  # source://eye//lib/eye/dsl/validation.rb#46
  def reretry_in; end

  # source://eye//lib/eye/dsl/validation.rb#51
  def reretry_in=(value); end

  # source://eye//lib/eye/dsl/validation.rb#46
  def reretry_times; end

  # source://eye//lib/eye/dsl/validation.rb#51
  def reretry_times=(value); end

  # source://eye//lib/eye/dsl/validation.rb#46
  def retry_in; end

  # source://eye//lib/eye/dsl/validation.rb#51
  def retry_in=(value); end

  # source://eye//lib/eye/dsl/validation.rb#46
  def retry_times; end

  # source://eye//lib/eye/dsl/validation.rb#51
  def retry_times=(value); end

  # source://eye//lib/eye/dsl/validation.rb#46
  def times; end

  # source://eye//lib/eye/dsl/validation.rb#51
  def times=(value); end

  # source://eye//lib/eye/dsl/validation.rb#46
  def within; end

  # source://eye//lib/eye/dsl/validation.rb#51
  def within=(value); end

  private

  # source://eye//lib/eye/trigger/flapping.rb#24
  def clear_counters; end

  # @return [Boolean]
  #
  # source://eye//lib/eye/trigger/flapping.rb#29
  def good?; end

  # source://eye//lib/eye/trigger/flapping.rb#43
  def on_flapping; end
end

# source://eye//lib/eye/trigger/starting_guard.rb#1
class Eye::Trigger::StartingGuard < ::Eye::Trigger
  # @return [StartingGuard] a new instance of StartingGuard
  #
  # source://eye//lib/eye/trigger/starting_guard.rb#15
  def initialize(*args); end

  # source://eye//lib/eye/trigger/starting_guard.rb#22
  def check(transition); end

  # @raise [Eye::Process::StateError]
  #
  # source://eye//lib/eye/trigger/starting_guard.rb#26
  def check_start; end

  # source://eye//lib/eye/dsl/validation.rb#46
  def every; end

  # source://eye//lib/eye/dsl/validation.rb#51
  def every=(value); end

  # source://eye//lib/eye/dsl/validation.rb#46
  def retry_in; end

  # source://eye//lib/eye/dsl/validation.rb#51
  def retry_in=(value); end

  # source://eye//lib/eye/dsl/validation.rb#46
  def retry_times; end

  # source://eye//lib/eye/dsl/validation.rb#51
  def retry_times=(value); end

  # source://eye//lib/eye/dsl/validation.rb#46
  def should; end

  # source://eye//lib/eye/dsl/validation.rb#51
  def should=(value); end

  # source://eye//lib/eye/dsl/validation.rb#46
  def times; end

  # source://eye//lib/eye/dsl/validation.rb#51
  def times=(value); end
end

# source://eye//lib/eye/trigger/stop_children.rb#1
class Eye::Trigger::StopChildren < ::Eye::Trigger
  # source://eye//lib/eye/trigger/stop_children.rb#12
  def check(_trans); end

  # source://eye//lib/eye/dsl/validation.rb#46
  def timeout; end

  # source://eye//lib/eye/dsl/validation.rb#51
  def timeout=(value); end
end

# source://eye//lib/eye/trigger.rb#12
Eye::Trigger::TYPES = T.let(T.unsafe(nil), Hash)

# source://eye//lib/eye/trigger/transition.rb#1
class Eye::Trigger::Transition < ::Eye::Trigger
  # source://eye//lib/eye/trigger/transition.rb#7
  def check(_trans); end
end

# source://eye//lib/eye/trigger/wait_dependency.rb#1
class Eye::Trigger::WaitDependency < ::Eye::Trigger
  # source://eye//lib/eye/trigger/wait_dependency.rb#8
  def check(transition); end

  # source://eye//lib/eye/dsl/validation.rb#46
  def names; end

  # source://eye//lib/eye/dsl/validation.rb#51
  def names=(value); end

  # source://eye//lib/eye/dsl/validation.rb#46
  def retry_after; end

  # source://eye//lib/eye/dsl/validation.rb#51
  def retry_after=(value); end

  # source://eye//lib/eye/dsl/validation.rb#46
  def should_start; end

  # source://eye//lib/eye/dsl/validation.rb#51
  def should_start=(value); end

  # source://eye//lib/eye/dsl/validation.rb#46
  def wait_timeout; end

  # source://eye//lib/eye/dsl/validation.rb#51
  def wait_timeout=(value); end

  private

  # source://eye//lib/eye/trigger/wait_dependency.rb#14
  def wait_dependency; end
end

# source://eye//lib/eye/utils.rb#3
module Eye::Utils
  class << self
    # source://eye//lib/eye/utils.rb#8
    def deep_clone(value); end

    # deep merging b into a (a deeply changed)
    #
    # source://eye//lib/eye/utils.rb#19
    def deep_merge!(a, b, allowed_keys = T.unsafe(nil)); end

    # source://eye//lib/eye/utils.rb#34
    def human_time(unix_time); end

    # source://eye//lib/eye/utils.rb#43
    def human_time2(unix_time); end

    # source://eye//lib/eye/utils.rb#47
    def load_env(filename); end

    # source://eye//lib/eye/utils.rb#60
    def wait_signal(timeout = T.unsafe(nil), &block); end
  end
end

# source://eye//lib/eye/utils/alive_array.rb#1
class Eye::Utils::AliveArray
  include ::Enumerable
  extend ::Forwardable

  # @return [AliveArray] a new instance of AliveArray
  #
  # source://eye//lib/eye/utils/alive_array.rb#9
  def initialize(arr = T.unsafe(nil)); end

  # source://eye//lib/eye/utils/alive_array.rb#41
  def +(other); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def <<(*args, &block); end

  # source://eye//lib/eye/utils/alive_array.rb#52
  def ==(other); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def [](*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def clear(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def delete(*args, &block); end

  # source://eye//lib/eye/utils/alive_array.rb#13
  def each(&block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def empty?(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def flatten(*args, &block); end

  # source://eye//lib/eye/utils/alive_array.rb#21
  def full_size; end

  # source://forwardable/1.3.1/forwardable.rb#226
  def present?(*args, &block); end

  # source://eye//lib/eye/utils/alive_array.rb#25
  def pure; end

  # source://forwardable/1.3.1/forwardable.rb#226
  def push(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def select!(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def size(*args, &block); end

  # source://eye//lib/eye/utils/alive_array.rb#33
  def sort(&block); end

  # source://eye//lib/eye/utils/alive_array.rb#37
  def sort!; end

  # source://eye//lib/eye/utils/alive_array.rb#29
  def sort_by(&block); end

  # source://eye//lib/eye/utils/alive_array.rb#17
  def to_a; end

  # source://forwardable/1.3.1/forwardable.rb#226
  def uniq!(*args, &block); end
end

# source://eye//lib/eye/utils.rb#31
Eye::Utils::D1 = T.let(T.unsafe(nil), String)

# source://eye//lib/eye/utils.rb#32
Eye::Utils::D2 = T.let(T.unsafe(nil), String)

# source://eye//lib/eye/utils.rb#41
Eye::Utils::DF = T.let(T.unsafe(nil), String)

# source://eye//lib/eye/utils/tail.rb#1
class Eye::Utils::Tail < ::Array
  # limited array
  #
  # @return [Tail] a new instance of Tail
  #
  # source://eye//lib/eye/utils/tail.rb#5
  def initialize(max_size = T.unsafe(nil)); end

  # source://eye//lib/eye/utils/tail.rb#16
  def <<(el); end

  # source://eye//lib/eye/utils/tail.rb#10
  def push(el); end
end

# source://eye//lib/eye.rb#2
Eye::VERSION = T.let(T.unsafe(nil), String)

# source://eye//lib/eye/utils/mini_active_support.rb#24
class NilClass
  # source://eye//lib/eye/utils/mini_active_support.rb#25
  def try(*args); end
end

# source://eye//lib/eye/utils/mini_active_support.rb#48
class Numeric
  include ::Comparable

  # source://eye//lib/eye/utils/mini_active_support.rb#79
  def ago; end

  # source://eye//lib/eye/utils/mini_active_support.rb#83
  def byte; end

  # source://eye//lib/eye/utils/mini_active_support.rb#83
  def bytes; end

  # source://eye//lib/eye/utils/mini_active_support.rb#69
  def day; end

  # source://eye//lib/eye/utils/mini_active_support.rb#69
  def days; end

  # source://eye//lib/eye/utils/mini_active_support.rb#98
  def gigabyte; end

  # source://eye//lib/eye/utils/mini_active_support.rb#98
  def gigabytes; end

  # source://eye//lib/eye/utils/mini_active_support.rb#64
  def hour; end

  # source://eye//lib/eye/utils/mini_active_support.rb#64
  def hours; end

  # source://eye//lib/eye/utils/mini_active_support.rb#88
  def kilobyte; end

  # source://eye//lib/eye/utils/mini_active_support.rb#88
  def kilobytes; end

  # source://eye//lib/eye/utils/mini_active_support.rb#93
  def megabyte; end

  # source://eye//lib/eye/utils/mini_active_support.rb#93
  def megabytes; end

  # source://eye//lib/eye/utils/mini_active_support.rb#59
  def minute; end

  # source://eye//lib/eye/utils/mini_active_support.rb#59
  def minutes; end

  # source://eye//lib/eye/utils/mini_active_support.rb#49
  def percent; end

  # source://eye//lib/eye/utils/mini_active_support.rb#49
  def percents; end

  # source://eye//lib/eye/utils/mini_active_support.rb#54
  def second; end

  # source://eye//lib/eye/utils/mini_active_support.rb#54
  def seconds; end

  # source://eye//lib/eye/utils/mini_active_support.rb#103
  def terabyte; end

  # source://eye//lib/eye/utils/mini_active_support.rb#103
  def terabytes; end

  # source://eye//lib/eye/utils/mini_active_support.rb#74
  def week; end

  # source://eye//lib/eye/utils/mini_active_support.rb#74
  def weeks; end
end

# source://eye//lib/eye/utils/mini_active_support.rb#10
class Object < ::BasicObject
  include ::ActiveSupport::ForkTracker::CoreExt
  include ::Kernel
  include ::PP::ObjectMixin
  include ::Eye::Logger::ObjectExt

  # @return [Boolean]
  #
  # source://eye//lib/eye/utils/mini_active_support.rb#11
  def blank?; end

  # @return [Boolean]
  #
  # source://eye//lib/eye/utils/mini_active_support.rb#15
  def present?; end

  # source://eye//lib/eye/utils/mini_active_support.rb#19
  def try(m, *args); end

  private

  # source://eye//lib/eye/dsl/helpers.rb#5
  def current_config_path; end

  # source://eye//lib/eye/dsl/helpers.rb#14
  def example_process(proxy, name); end

  # source://eye//lib/eye/dsl/helpers.rb#10
  def hostname; end

  # source://eye//lib/eye/utils/mini_active_support.rb#3
  def silence_warnings; end
end

# source://eye//lib/eye/utils/mini_active_support.rb#29
class String
  include ::Comparable

  # source://eye//lib/eye/utils/mini_active_support.rb#30
  def underscore; end
end
