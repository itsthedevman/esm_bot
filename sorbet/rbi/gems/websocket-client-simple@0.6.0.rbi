# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `websocket-client-simple` gem.
# Please instead update this file by running `bin/tapioca gem websocket-client-simple`.

# WebSocket protocol implementation in Ruby
# This module does not provide a WebSocket server or client, but is made for using
# in http servers or clients to provide WebSocket support.
#
# @author Bernard "Imanel" Potocki
# @see http://github.com/imanel/websocket-ruby main repository
#
# source://websocket-client-simple//lib/websocket-client-simple/version.rb#1
module WebSocket
  class << self
    # Limit of frame size payload in bytes
    #
    # source://websocket/1.2.9/lib/websocket.rb#20
    def max_frame_size; end

    # Set limit of frame size payload in bytes
    #
    # source://websocket/1.2.9/lib/websocket.rb#25
    def max_frame_size=(val); end

    # If set to true error will be raised instead of setting `error` method.
    # All errors inherit from WebSocket::Error.
    #
    # source://websocket/1.2.9/lib/websocket.rb#31
    def should_raise; end

    # Should protocol errors raise ruby errors? If false then `error` flag is set instead.
    #
    # source://websocket/1.2.9/lib/websocket.rb#36
    def should_raise=(val); end
  end
end

# source://websocket-client-simple//lib/websocket-client-simple/version.rb#2
module WebSocket::Client; end

# source://websocket-client-simple//lib/websocket-client-simple/version.rb#3
module WebSocket::Client::Simple
  class << self
    # @yield [client]
    #
    # source://websocket-client-simple//lib/websocket-client-simple/client.rb#5
    def connect(url, options = T.unsafe(nil)); end
  end
end

# source://websocket-client-simple//lib/websocket-client-simple/client.rb#12
class WebSocket::Client::Simple::Client
  include ::EventEmitter
  include ::EventEmitter::InstanceMethods

  # source://websocket-client-simple//lib/websocket-client-simple/client.rb#87
  def close; end

  # @return [Boolean]
  #
  # source://websocket-client-simple//lib/websocket-client-simple/client.rb#103
  def closed?; end

  # source://websocket-client-simple//lib/websocket-client-simple/client.rb#16
  def connect(url, options = T.unsafe(nil)); end

  # Returns the value of attribute handshake.
  #
  # source://websocket-client-simple//lib/websocket-client-simple/client.rb#14
  def handshake; end

  # @return [Boolean]
  #
  # source://websocket-client-simple//lib/websocket-client-simple/client.rb#99
  def open?; end

  # source://websocket-client-simple//lib/websocket-client-simple/client.rb#72
  def send(data, opt = T.unsafe(nil)); end

  # source://discordrb/3.4.2-ad5dd1641f3653ca4e76d44f901adb42018e354e/lib/discordrb/websocket.rb#11
  def thread; end

  # Returns the value of attribute url.
  #
  # source://websocket-client-simple//lib/websocket-client-simple/client.rb#14
  def url; end
end

# source://websocket-client-simple//lib/websocket-client-simple/version.rb#4
WebSocket::Client::Simple::VERSION = T.let(T.unsafe(nil), String)

module WebSocket::Mask
  class << self
    def mask(_arg0, _arg1); end
  end
end
