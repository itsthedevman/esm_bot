# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `celluloid-supervision` gem.
# Please instead update this file by running `bin/tapioca gem celluloid-supervision`.

# TODO: Remove at 0.19.0
#
# source://celluloid-supervision//lib/celluloid/supervision/constants.rb#1
module Celluloid
  include ::Celluloid::InstanceMethods

  mixes_in_class_methods ::Celluloid::ClassMethods
  mixes_in_class_methods ::Celluloid::Internals::Properties

  # source://forwardable/1.3.1/forwardable.rb#226
  def [](*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def []=(*args, &block); end

  # source://celluloid/0.17.4/lib/celluloid.rb#317
  def abort(cause); end

  # source://celluloid/0.17.4/lib/celluloid.rb#431
  def after(interval, &block); end

  # source://celluloid/0.17.4/lib/celluloid.rb#450
  def async(meth = T.unsafe(nil), *args, &block); end

  # source://celluloid/0.17.4/lib/celluloid.rb#347
  def call_chain_id; end

  # source://celluloid/0.17.4/lib/celluloid.rb#342
  def current_actor; end

  # source://celluloid/0.17.4/lib/celluloid.rb#443
  def defer(&block); end

  # source://celluloid/0.17.4/lib/celluloid.rb#436
  def every(interval, &block); end

  # source://celluloid/0.17.4/lib/celluloid.rb#420
  def exclusive(&block); end

  # source://celluloid/0.17.4/lib/celluloid.rb#425
  def exclusive?; end

  # source://celluloid/0.17.4/lib/celluloid.rb#455
  def future(meth = T.unsafe(nil), *args, &block); end

  # source://celluloid/0.17.4/lib/celluloid.rb#372
  def link(actor); end

  # source://celluloid/0.17.4/lib/celluloid.rb#387
  def linked_to?(actor); end

  # source://celluloid/0.17.4/lib/celluloid.rb#357
  def links; end

  # source://celluloid/0.17.4/lib/celluloid.rb#362
  def monitor(actor); end

  # source://celluloid/0.17.4/lib/celluloid.rb#382
  def monitoring?(actor); end

  # source://celluloid/0.17.4/lib/celluloid.rb#392
  def receive(timeout = T.unsafe(nil), &block); end

  # source://celluloid-supervision//lib/celluloid/supervision/container/instance.rb#81
  def services; end

  # source://celluloid/0.17.4/lib/celluloid.rb#332
  def signal(name, value = T.unsafe(nil)); end

  # source://celluloid/0.17.4/lib/celluloid.rb#402
  def sleep(interval); end

  # source://celluloid/0.17.4/lib/celluloid.rb#352
  def tasks; end

  # source://celluloid/0.17.4/lib/celluloid.rb#327
  def terminate; end

  # source://celluloid/0.17.4/lib/celluloid.rb#412
  def timeout(duration); end

  # source://celluloid/0.17.4/lib/celluloid.rb#377
  def unlink(actor); end

  # source://celluloid/0.17.4/lib/celluloid.rb#367
  def unmonitor(actor); end

  # source://celluloid/0.17.4/lib/celluloid.rb#337
  def wait(name); end

  class << self
    # source://celluloid/0.17.4/lib/celluloid.rb#81
    def actor?; end

    # source://celluloid/0.17.4/lib/celluloid.rb#34
    def actor_system; end

    # source://celluloid/0.17.4/lib/celluloid.rb#27
    def actor_system=(_arg0); end

    # source://celluloid/0.17.4/lib/celluloid.rb#145
    def boot; end

    # source://celluloid/0.17.4/lib/celluloid.rb#96
    def cores; end

    # source://celluloid/0.17.4/lib/celluloid.rb#96
    def cpus; end

    # source://celluloid/0.17.4/lib/celluloid.rb#119
    def detect_recursion; end

    # source://celluloid/0.17.4/lib/celluloid.rb#103
    def dump(output = T.unsafe(nil)); end

    # source://celluloid/0.17.4/lib/celluloid.rb#131
    def exception_handler(&block); end

    # source://celluloid/0.17.4/lib/celluloid.rb#30
    def group_class; end

    # source://celluloid/0.17.4/lib/celluloid.rb#30
    def group_class=(_arg0); end

    # source://celluloid/0.17.4/lib/celluloid.rb#42
    def included(klass); end

    # source://celluloid/0.17.4/lib/celluloid.rb#150
    def init; end

    # source://celluloid/0.17.4/lib/celluloid.rb#29
    def log_actor_crashes; end

    # source://celluloid/0.17.4/lib/celluloid.rb#29
    def log_actor_crashes=(_arg0); end

    # source://celluloid/0.17.4/lib/celluloid.rb#28
    def logger; end

    # source://celluloid/0.17.4/lib/celluloid.rb#28
    def logger=(_arg0); end

    # source://celluloid/0.17.4/lib/celluloid.rb#86
    def mailbox; end

    # source://celluloid/0.17.4/lib/celluloid.rb#96
    def ncpus; end

    # source://celluloid/0.17.4/lib/celluloid.rb#114
    def public_registry; end

    # source://celluloid-essentials/0.20.5/lib/celluloid/notifications.rb#92
    def publish(*args); end

    # source://celluloid/0.17.4/lib/celluloid.rb#162
    def register_shutdown; end

    # source://celluloid/0.17.4/lib/celluloid.rb#158
    def running?; end

    # source://celluloid/0.17.4/lib/celluloid.rb#183
    def shutdown; end

    # source://celluloid/0.17.4/lib/celluloid.rb#32
    def shutdown_timeout; end

    # source://celluloid/0.17.4/lib/celluloid.rb#32
    def shutdown_timeout=(_arg0); end

    # source://celluloid/0.17.4/lib/celluloid.rb#103
    def stack_dump(output = T.unsafe(nil)); end

    # source://celluloid/0.17.4/lib/celluloid.rb#109
    def stack_summary(output = T.unsafe(nil)); end

    # source://celluloid/0.17.4/lib/celluloid.rb#154
    def start; end

    # source://celluloid/0.17.4/lib/celluloid.rb#109
    def summarize(output = T.unsafe(nil)); end

    # source://celluloid-supervision//lib/celluloid/supervision/deprecate/supervise.rb#5
    def supervise(*args, &block); end

    # source://celluloid-supervision//lib/celluloid/supervision/deprecate/supervise.rb#10
    def supervise_as(name, *args, &block); end

    # source://celluloid/0.17.4/lib/celluloid.rb#135
    def suspend(status, waiter); end

    # source://celluloid/0.17.4/lib/celluloid.rb#31
    def task_class; end

    # source://celluloid/0.17.4/lib/celluloid.rb#31
    def task_class=(_arg0); end

    # source://celluloid/0.17.4/lib/celluloid.rb#91
    def uuid; end

    # source://celluloid/0.17.4/lib/celluloid.rb#187
    def version; end
  end
end

# source://celluloid-supervision//lib/celluloid/supervision/supervise.rb#9
module Celluloid::ClassMethods
  # source://celluloid/0.17.4/lib/celluloid.rb#242
  def ===(other); end

  # source://celluloid/0.17.4/lib/celluloid.rb#222
  def actor_options; end

  # source://celluloid/0.17.4/lib/celluloid.rb#217
  def actor_system; end

  # source://celluloid/0.17.4/lib/celluloid.rb#232
  def behavior_options; end

  # source://celluloid/0.17.4/lib/celluloid.rb#194
  def new(*args, &block); end

  # source://celluloid/0.17.4/lib/celluloid.rb#202
  def new_link(*args, &block); end

  # source://celluloid-pool/0.20.5/lib/celluloid/supervision/container/behavior/pool.rb#12
  def pool(config = T.unsafe(nil), &block); end

  # source://celluloid-pool/0.20.5/lib/celluloid/supervision/container/behavior/pool.rb#18
  def pool_link(klass, config = T.unsafe(nil), &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def pooling_options(*args, &block); end

  # source://celluloid/0.17.4/lib/celluloid.rb#213
  def run(*args, &block); end

  # source://celluloid/0.17.4/lib/celluloid.rb#194
  def spawn(*args, &block); end

  # source://celluloid/0.17.4/lib/celluloid.rb#202
  def spawn_link(*args, &block); end

  # source://celluloid-supervision//lib/celluloid/supervision/deprecate/supervise.rb#17
  def supervise(*args, &block); end

  # source://celluloid-supervision//lib/celluloid/supervision/deprecate/supervise.rb#22
  def supervise_as(name, *args, &block); end
end

# Supervise collections of actors as a group
#
# source://celluloid-supervision//lib/celluloid/supervision/constants.rb#2
module Celluloid::Supervision
  class << self
    # source://celluloid-supervision//lib/celluloid/supervision/deprecate/supervise.rb#52
    def router(*_args); end
  end
end

# source://celluloid-supervision//lib/celluloid/supervision/constants.rb#11
class Celluloid::Supervision::Configuration
  extend ::Forwardable

  # @return [Configuration] a new instance of Configuration
  #
  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#28
  def initialize(options = T.unsafe(nil)); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def [](*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def []=(*args, &block); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#151
  def add(options); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#146
  def another; end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#90
  def args; end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#84
  def args!(p); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#84
  def args=(p); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#90
  def args?; end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#90
  def as; end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#84
  def as!(p); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#84
  def as=(p); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#90
  def as?; end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#90
  def block; end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#84
  def block!(p); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#84
  def block=(p); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#90
  def block?; end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#90
  def branch; end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#84
  def branch!(p); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#84
  def branch=(p); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#90
  def branch?; end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#70
  def count; end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#130
  def define(configuration, fail = T.unsafe(nil)); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def delete(*args, &block); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#62
  def deploy(options = T.unsafe(nil)); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#74
  def each(&block); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#121
  def export; end

  # source://forwardable/1.3.1/forwardable.rb#226
  def get(*args, &block); end

  # @return [Boolean]
  #
  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#126
  def include?(name); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#146
  def increment; end

  # source://forwardable/1.3.1/forwardable.rb#226
  def injection!(*args, &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def injections!(*args, &block); end

  # Returns the value of attribute instances.
  #
  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#26
  def instances; end

  # Sets the attribute instances
  #
  # @param value the value to set the attribute instances to.
  #
  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#26
  def instances=(_arg0); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def key?(*args, &block); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#90
  def kind; end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#84
  def kind!(p); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#84
  def kind=(p); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#90
  def kind?; end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#113
  def merge(values); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#105
  def merge!(values); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#90
  def method; end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#84
  def method!(p); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#84
  def method=(p); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#90
  def method?; end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#90
  def name; end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#84
  def name!(p); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#84
  def name=(p); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#90
  def name?; end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#90
  def pool; end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#84
  def pool!(p); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#84
  def pool=(p); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#90
  def pool?; end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#47
  def provider; end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#90
  def registry; end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#84
  def registry!(p); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#84
  def registry=(p); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#90
  def registry?; end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#78
  def resync_accessors; end

  # source://forwardable/1.3.1/forwardable.rb#226
  def set(*args, &block); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#156
  def shutdown; end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#90
  def size; end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#84
  def size!(p); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#84
  def size=(p); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#90
  def size?; end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#90
  def supervise; end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#84
  def supervise!(p); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#84
  def supervise=(p); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#90
  def supervise?; end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#90
  def supervises; end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#84
  def supervises!(p); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#84
  def supervises=(p); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#90
  def supervises?; end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#90
  def type; end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#84
  def type!(p); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#84
  def type=(p); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#90
  def type?; end

  private

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#162
  def current_instance; end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#166
  def invoke_injection(_point); end

  class << self
    # source://celluloid-supervision//lib/celluloid/supervision/constants.rb#94
    def alias!(aliased, original); end

    # source://celluloid-supervision//lib/celluloid/supervision/constants.rb#90
    def aliases; end

    # source://celluloid-supervision//lib/celluloid/supervision/constants.rb#82
    def arity; end

    # source://celluloid-supervision//lib/celluloid/supervision/constants.rb#86
    def arity!(key, value); end

    # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#9
    def define(options = T.unsafe(nil)); end

    # source://celluloid-supervision//lib/celluloid/supervision/configuration.rb#5
    def deploy(options = T.unsafe(nil)); end

    # source://celluloid-supervision//lib/celluloid/supervision/deprecate/validation.rb#40
    def options(args, options = T.unsafe(nil)); end

    # source://celluloid-supervision//lib/celluloid/supervision/constants.rb#78
    def parameter!(key, value); end

    # source://celluloid-supervision//lib/celluloid/supervision/constants.rb#74
    def parameters(*args); end

    # source://celluloid-supervision//lib/celluloid/supervision/deprecate/validation.rb#12
    def parse(args); end

    # source://celluloid-supervision//lib/celluloid/supervision/constants.rb#68
    def resync_parameters; end

    # source://celluloid-supervision//lib/celluloid/supervision/constants.rb#60
    def save_defaults; end

    # @return [Boolean]
    #
    # source://celluloid-supervision//lib/celluloid/supervision/validation.rb#5
    def valid?(configuration, fails = T.unsafe(nil)); end
  end
end

# source://celluloid-supervision//lib/celluloid/supervision/constants.rb#12
module Celluloid::Supervision::Configuration::Error; end

# source://celluloid-supervision//lib/celluloid/supervision/constants.rb#13
class Celluloid::Supervision::Configuration::Error::AlreadyDefined < ::Celluloid::Error; end

# source://celluloid-supervision//lib/celluloid/supervision/constants.rb#16
class Celluloid::Supervision::Configuration::Error::Incomplete < ::Celluloid::Error; end

# source://celluloid-supervision//lib/celluloid/supervision/constants.rb#17
class Celluloid::Supervision::Configuration::Error::Invalid < ::Celluloid::Error; end

# source://celluloid-supervision//lib/celluloid/supervision/constants.rb#14
class Celluloid::Supervision::Configuration::Error::InvalidSupervisor < ::Celluloid::Error; end

# source://celluloid-supervision//lib/celluloid/supervision/constants.rb#15
class Celluloid::Supervision::Configuration::Error::InvalidValues < ::Celluloid::Error; end

# source://celluloid-supervision//lib/celluloid/supervision/constants.rb#114
Celluloid::Supervision::Configuration::INJECTIONS = T.let(T.unsafe(nil), Array)

# source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#4
class Celluloid::Supervision::Configuration::Instance
  # @return [Instance] a new instance of Instance
  #
  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#7
  def initialize(configuration = T.unsafe(nil)); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#96
  def [](key); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#91
  def []=(key, value); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#58
  def args; end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#46
  def args!(value); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#50
  def args=(value); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#54
  def args?; end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#58
  def as; end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#46
  def as!(value); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#50
  def as=(value); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#54
  def as?; end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#58
  def block; end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#46
  def block!(value); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#50
  def block=(value); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#54
  def block?; end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#58
  def branch; end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#46
  def branch!(value); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#50
  def branch=(value); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#54
  def branch?; end

  # Returns the value of attribute configuration.
  #
  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#5
  def configuration; end

  # Sets the attribute configuration
  #
  # @param value the value to set the attribute configuration to.
  #
  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#5
  def configuration=(_arg0); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#25
  def define(instance, fail = T.unsafe(nil)); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#101
  def delete(k); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#14
  def export; end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#96
  def get(key); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#32
  def injection!(key, proc); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#37
  def injections!(_procs); end

  # @return [Boolean]
  #
  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#87
  def key?(k); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#58
  def kind; end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#46
  def kind!(value); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#50
  def kind=(value); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#54
  def kind?; end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#77
  def merge(values); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#73
  def merge!(values); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#58
  def method; end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#46
  def method!(value); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#50
  def method=(value); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#54
  def method?; end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#58
  def name; end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#46
  def name!(value); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#50
  def name=(value); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#54
  def name?; end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#58
  def pool; end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#46
  def pool!(value); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#50
  def pool=(value); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#54
  def pool?; end

  # @return [Boolean]
  #
  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#18
  def ready?(fail = T.unsafe(nil)); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#58
  def registry; end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#46
  def registry!(value); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#50
  def registry=(value); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#54
  def registry?; end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#41
  def resync_accessors; end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#91
  def set(key, value); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#58
  def size; end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#46
  def size!(value); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#50
  def size=(value); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#54
  def size?; end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#58
  def supervise; end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#46
  def supervise!(value); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#50
  def supervise=(value); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#54
  def supervise?; end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#58
  def supervises; end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#46
  def supervises!(value); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#50
  def supervises=(value); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#54
  def supervises?; end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#58
  def type; end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#46
  def type!(value); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#50
  def type=(value); end

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#54
  def type?; end

  private

  # source://celluloid-supervision//lib/celluloid/supervision/configuration/instance.rb#107
  def invoke_injection(_point); end
end

# These are applied inside Supervision::Member ################
#
# source://celluloid-supervision//lib/celluloid/supervision/constants.rb#109
Celluloid::Supervision::Configuration::REMOVE_AT_EXPORT = T.let(T.unsafe(nil), Array)

# source://celluloid-supervision//lib/celluloid/supervision/supervise.rb#21
class Celluloid::Supervision::Container
  include ::Celluloid
  include ::Celluloid::InstanceMethods
  extend ::Celluloid::ClassMethods
  extend ::Celluloid::Internals::Properties

  # Start the container.
  #
  # @return [Container] a new instance of Container
  # @yield [current_actor]
  #
  # source://celluloid-supervision//lib/celluloid/supervision/container.rb#60
  def initialize(options = T.unsafe(nil)); end

  # source://celluloid-supervision//lib/celluloid/supervision/container.rb#110
  def [](actor_name); end

  # source://celluloid-supervision//lib/celluloid/supervision/container.rb#100
  def actors; end

  # source://celluloid-supervision//lib/celluloid/supervision/container.rb#71
  def add(configuration); end

  # source://celluloid-supervision//lib/celluloid/supervision/container.rb#79
  def add_accessors(configuration); end

  # source://celluloid-supervision//lib/celluloid/supervision/container.rb#104
  def find(actor); end

  # source://celluloid-pool/0.20.5/lib/celluloid/supervision/container/behavior/pool.rb#28
  def pool(klass, config = T.unsafe(nil), &block); end

  # source://forwardable/1.3.1/forwardable.rb#226
  def pooling_options(*args, &block); end

  # Returns the value of attribute registry.
  #
  # source://celluloid-supervision//lib/celluloid/supervision/container.rb#57
  def registry; end

  # Sets the attribute registry
  #
  # @param value the value to set the attribute registry to.
  #
  # source://celluloid-supervision//lib/celluloid/supervision/container.rb#57
  def registry=(_arg0); end

  # source://celluloid-supervision//lib/celluloid/supervision/container.rb#94
  def remove(actor); end

  # source://celluloid-supervision//lib/celluloid/supervision/container.rb#91
  def remove_accessors; end

  # Restart a crashed actor
  #
  # source://celluloid-supervision//lib/celluloid/supervision/container.rb#115
  def restart_actor(actor, reason); end

  # source://celluloid-supervision//lib/celluloid/supervision/container.rb#128
  def shutdown; end

  # source://celluloid-supervision//lib/celluloid/supervision/deprecate/supervise.rb#95
  def supervise(*args, &block); end

  # source://celluloid-supervision//lib/celluloid/supervision/deprecate/supervise.rb#100
  def supervise_as(name, *args, &block); end

  private

  # source://celluloid-supervision//lib/celluloid/supervision/container.rb#135
  def finalize; end

  class << self
    # Actors or sub-applications to be supervised
    #
    # source://celluloid-supervision//lib/celluloid/supervision/container.rb#28
    def blocks; end

    # source://celluloid-supervision//lib/celluloid/supervision/container.rb#10
    def define(options); end

    # source://celluloid-supervision//lib/celluloid/supervision/container.rb#14
    def deploy(options); end

    # source://celluloid/0.17.4/lib/celluloid.rb#71
    def exclusive(*args); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def exclusive_actor(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def exclusive_methods(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def execute_block_on_receiver(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def exit_handler_name(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def finalizer(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def group_class(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def mailbox_class(value = T.unsafe(nil), *extra); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def mailbox_size(value = T.unsafe(nil), *extra); end

    # source://celluloid-pool/0.20.5/lib/celluloid/supervision/container/behavior/pool.rb#39
    def pool(klass, config, &block); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def proxy_class(value = T.unsafe(nil), *extra); end

    # Run the application in the foreground with a simple watchdog
    #
    # source://celluloid-supervision//lib/celluloid/supervision/deprecate/supervise.rb#70
    def run(*args); end

    # Start this application (and watch it with a supervisor)
    #
    # source://celluloid-supervision//lib/celluloid/supervision/deprecate/supervise.rb#60
    def run!(*args); end

    # source://celluloid-supervision//lib/celluloid/supervision/deprecate/supervise.rb#80
    def supervise(*args, &block); end

    # source://celluloid-supervision//lib/celluloid/supervision/deprecate/supervise.rb#87
    def supervise_as(name, *args, &block); end

    # source://celluloid-essentials/0.20.5/lib/celluloid/internals/properties.rb#13
    def task_class(value = T.unsafe(nil), *extra); end

    # source://celluloid-supervision//lib/celluloid/supervision/container.rb#18
    def top(options); end

    # source://celluloid/0.17.4/lib/celluloid.rb#67
    def trap_exit(*args); end
  end
end

# source://celluloid-supervision//lib/celluloid/supervision/container/behavior.rb#4
module Celluloid::Supervision::Container::Behavior
  class << self
    # source://celluloid-supervision//lib/celluloid/supervision/container/behavior.rb#21
    def [](identifier); end

    # source://celluloid-supervision//lib/celluloid/supervision/container/behavior.rb#25
    def []=(identifier, behavior); end

    # Beware of order. There may be multiple behavior injections, but their order is not determined ( yet )
    # Right now, something like a pool-coordinator-tree supervisor mutant are absolutely expected to crash.
    # Therefore, sorry Professor X -- we kill every Mutant. On sight, no questions asked. Zero mutant love.
    #
    # source://celluloid-supervision//lib/celluloid/supervision/container/behavior.rb#45
    def configure(options); end

    # @private
    #
    # source://celluloid-supervision//lib/celluloid/supervision/container/behavior.rb#13
    def included(klass); end

    # source://celluloid-supervision//lib/celluloid/supervision/container/behavior.rb#17
    def injections; end

    # source://celluloid-supervision//lib/celluloid/supervision/container/behavior.rb#29
    def parameter(identifier, options); end
  end
end

# source://celluloid-supervision//lib/celluloid/supervision/container/behavior.rb#8
module Celluloid::Supervision::Container::Behavior::Error; end

# source://celluloid-supervision//lib/celluloid/supervision/container/behavior.rb#9
class Celluloid::Supervision::Container::Behavior::Error::Mutant < ::Celluloid::Error; end

# source://celluloid-supervision//lib/celluloid/supervision/container/injections.rb#4
class Celluloid::Supervision::Container::Injection; end

# source://celluloid-supervision//lib/celluloid/supervision/container/instance.rb#5
class Celluloid::Supervision::Container::Instance
  # @option options
  # @param options [Hash] a customizable set of options
  # @return [Instance] a new instance of Instance
  #
  # source://celluloid-supervision//lib/celluloid/supervision/container/instance.rb#10
  def initialize(configuration = T.unsafe(nil)); end

  # Returns the value of attribute actor.
  #
  # source://celluloid-supervision//lib/celluloid/supervision/container/instance.rb#6
  def actor; end

  # source://celluloid-supervision//lib/celluloid/supervision/container/instance.rb#67
  def cleanup; end

  # Returns the value of attribute name.
  #
  # source://celluloid-supervision//lib/celluloid/supervision/container/instance.rb#6
  def name; end

  # source://celluloid-pool/0.20.5/lib/celluloid/supervision/container/behavior/pool.rb#34
  def pool; end

  # source://celluloid-pool/0.20.5/lib/celluloid/supervision/container/behavior/pool.rb#34
  def pool=(_arg0); end

  # source://celluloid-pool/0.20.5/lib/celluloid/supervision/container/behavior/pool.rb#34
  def pool_size; end

  # source://celluloid-pool/0.20.5/lib/celluloid/supervision/container/behavior/pool.rb#34
  def pool_size=(_arg0); end

  # source://celluloid-supervision//lib/celluloid/supervision/container/instance.rb#52
  def restart; end

  # source://celluloid-supervision//lib/celluloid/supervision/container/instance.rb#32
  def start; end

  # source://celluloid-supervision//lib/celluloid/supervision/container/instance.rb#61
  def terminate; end

  private

  # source://celluloid-supervision//lib/celluloid/supervision/container/instance.rb#73
  def add_accessors; end

  # source://celluloid-supervision//lib/celluloid/supervision/container/instance.rb#107
  def invoke_injection(name); end

  # Executes args if it has the method #call, and converts the return
  # value to an Array. Otherwise, it just converts it to an Array.
  #
  # source://celluloid-supervision//lib/celluloid/supervision/container/instance.rb#115
  def prepare_args(args); end

  # source://celluloid-supervision//lib/celluloid/supervision/container/instance.rb#94
  def remove_accessors; end
end

# source://celluloid-supervision//lib/celluloid/supervision/container/behavior/tree.rb#5
class Celluloid::Supervision::Container::Tree
  include ::Celluloid::Supervision::Container::Behavior
end

# source://celluloid-supervision//lib/celluloid/supervision/constants.rb#7
module Celluloid::Supervision::Error; end

# source://celluloid-supervision//lib/celluloid/supervision/constants.rb#8
class Celluloid::Supervision::Error::NoPublicService < ::Celluloid::Error; end

# source://celluloid-supervision//lib/celluloid/supervision/deprecate.rb#4
Celluloid::Supervision::Group = Celluloid::Supervision::Container

# source://celluloid-supervision//lib/celluloid/supervision/constants.rb#5
Celluloid::Supervision::INSTANCE_RETRY_LIMIT = T.let(T.unsafe(nil), Integer)

# TODO: Do not hard-code. Allow configurable values.
#
# source://celluloid-supervision//lib/celluloid/supervision/constants.rb#4
Celluloid::Supervision::INSTANCE_RETRY_WAIT = T.let(T.unsafe(nil), Integer)

# source://celluloid-supervision//lib/celluloid/supervision/deprecate.rb#5
Celluloid::Supervision::Member = Celluloid::Supervision::Container::Instance

# source://celluloid-supervision//lib/celluloid/supervision/service.rb#3
module Celluloid::Supervision::Service; end

# source://celluloid-supervision//lib/celluloid/supervision/service.rb#24
class Celluloid::Supervision::Service::Public < ::Celluloid::Supervision::Container
  # source://celluloid-supervision//lib/celluloid/supervision/container.rb#83
  def system_resources_cache; end
end

# source://celluloid-supervision//lib/celluloid/supervision/service.rb#4
class Celluloid::Supervision::Service::Root < ::Celluloid::Supervision::Container
  # source://celluloid-supervision//lib/celluloid/supervision/container.rb#83
  def incident_reporter; end

  # source://celluloid-supervision//lib/celluloid/supervision/container.rb#83
  def notifications_fanout; end

  # source://celluloid-supervision//lib/celluloid/supervision/service.rb#20
  def provider; end

  # source://celluloid-supervision//lib/celluloid/supervision/container.rb#83
  def public_services; end

  class << self
    # source://celluloid-supervision//lib/celluloid/supervision/service.rb#6
    def define; end

    # source://celluloid-supervision//lib/celluloid/supervision/service.rb#16
    def deploy(instances); end
  end
end

# source://celluloid-supervision//lib/celluloid/supervision/deprecate.rb#3
Celluloid::SupervisionGroup = Celluloid::Supervision::Container

# Supervisors are actors that watch over other actors and restart them if
# they crash
#
# source://celluloid-supervision//lib/celluloid/supervision/deprecate/supervise.rb#30
class Celluloid::Supervisor
  class << self
    # Define the root of the supervision tree
    #
    # source://celluloid-supervision//lib/celluloid/supervision/deprecate/supervise.rb#33
    def root; end

    # Define the root of the supervision tree
    #
    # source://celluloid-supervision//lib/celluloid/supervision/deprecate/supervise.rb#33
    def root=(_arg0); end

    # source://celluloid-supervision//lib/celluloid/supervision/deprecate/supervise.rb#36
    def supervise(klass, *args, &block); end

    # source://celluloid-supervision//lib/celluloid/supervision/deprecate/supervise.rb#42
    def supervise_as(name, klass, *args, &block); end
  end
end
