# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `otr-activerecord` gem.
# Please instead update this file by running `bin/tapioca gem otr-activerecord`.

# "Off the Rails" ActiveRecord configuration/integration for Grape, Sinatra, Rack, and any other kind of app
#
# source://otr-activerecord//lib/otr-activerecord/version.rb#1
module OTR; end

# ActiveRecord configuration module
#
# source://otr-activerecord//lib/otr-activerecord/version.rb#2
module OTR::ActiveRecord
  class << self
    # Internal compatibility layer across different major versions of AR
    #
    # source://otr-activerecord//lib/otr-activerecord/activerecord.rb#22
    def _normalizer; end

    # Internal compatibility layer across different major versions of AR
    #
    # source://otr-activerecord//lib/otr-activerecord/activerecord.rb#22
    def _normalizer=(_arg0); end

    # source://otr-activerecord//lib/otr-activerecord/activerecord.rb#78
    def append_migration_path(config); end

    # Connect to database with a yml file. Example: "config/database.yml"
    #
    # source://otr-activerecord//lib/otr-activerecord/activerecord.rb#59
    def configure_from_file!(path); end

    # Connect to database with a Hash. Example:
    #
    # source://otr-activerecord//lib/otr-activerecord/activerecord.rb#27
    def configure_from_hash!(spec); end

    # Connect to database with a DB URL. Example: "postgres://user:pass@localhost/db"
    #
    # source://otr-activerecord//lib/otr-activerecord/activerecord.rb#33
    def configure_from_url!(url); end

    # Relative path to the "db" dir
    #
    # source://otr-activerecord//lib/otr-activerecord/activerecord.rb#14
    def db_dir; end

    # Relative path to the "db" dir
    #
    # source://otr-activerecord//lib/otr-activerecord/activerecord.rb#14
    def db_dir=(_arg0); end

    # Establish a connection to the given db (defaults to current rack env)
    #
    # source://otr-activerecord//lib/otr-activerecord/activerecord.rb#74
    def establish_connection!(db = T.unsafe(nil)); end

    # Relative path to the fixtures directory
    #
    # source://otr-activerecord//lib/otr-activerecord/activerecord.rb#18
    def fixtures_path; end

    # Relative path to the fixtures directory
    #
    # source://otr-activerecord//lib/otr-activerecord/activerecord.rb#18
    def fixtures_path=(_arg0); end

    # Relative path(s) to the migrations directory
    #
    # source://otr-activerecord//lib/otr-activerecord/activerecord.rb#16
    def migrations_paths; end

    # Relative path(s) to the migrations directory
    #
    # source://otr-activerecord//lib/otr-activerecord/activerecord.rb#16
    def migrations_paths=(_arg0); end

    # The current Rack environment
    #
    # source://otr-activerecord//lib/otr-activerecord/activerecord.rb#84
    def rack_env; end

    # Name of the seeds file in db_dir
    #
    # source://otr-activerecord//lib/otr-activerecord/activerecord.rb#20
    def seed_file; end

    # Name of the seeds file in db_dir
    #
    # source://otr-activerecord//lib/otr-activerecord/activerecord.rb#20
    def seed_file=(_arg0); end

    private

    # Support old Psych versions
    #
    # source://otr-activerecord//lib/otr-activerecord/activerecord.rb#89
    def load_yaml(path); end
  end
end

# Compatibility layer for ActiveRecord 4
#
# source://otr-activerecord//lib/otr-activerecord/compatibility_4.rb#4
class OTR::ActiveRecord::Compatibility4
  # Compatibility layer for ActiveRecord 4
  #
  # @return [Compatibility4] a new instance of Compatibility4
  #
  # source://otr-activerecord//lib/otr-activerecord/compatibility_4.rb#8
  def initialize; end

  # Force RACK_ENV/RAILS_ENV to be 'test' when running any db:test:* tasks
  #
  # @return [Boolean]
  #
  # source://otr-activerecord//lib/otr-activerecord/compatibility_4.rb#29
  def force_db_test_env?; end

  # Returns the value of attribute major_version.
  #
  # source://otr-activerecord//lib/otr-activerecord/compatibility_4.rb#5
  def major_version; end

  # Basename of migration classes
  #
  # source://otr-activerecord//lib/otr-activerecord/compatibility_4.rb#24
  def migration_base_class_name; end

  # The dir in which to put new migrations
  #
  # source://otr-activerecord//lib/otr-activerecord/compatibility_4.rb#19
  def migrations_path; end

  # All db migration dir paths
  #
  # source://otr-activerecord//lib/otr-activerecord/compatibility_4.rb#14
  def migrations_paths; end
end

# Compatibility layer for ActiveRecord 5
#
# source://otr-activerecord//lib/otr-activerecord/compatibility_5.rb#4
class OTR::ActiveRecord::Compatibility5
  # Compatibility layer for ActiveRecord 5
  #
  # @return [Compatibility5] a new instance of Compatibility5
  #
  # source://otr-activerecord//lib/otr-activerecord/compatibility_5.rb#8
  def initialize; end

  # Force RACK_ENV/RAILS_ENV to be 'test' when running any db:test:* tasks
  #
  # @return [Boolean]
  #
  # source://otr-activerecord//lib/otr-activerecord/compatibility_5.rb#30
  def force_db_test_env?; end

  # Returns the value of attribute major_version.
  #
  # source://otr-activerecord//lib/otr-activerecord/compatibility_5.rb#5
  def major_version; end

  # Basename of migration classes
  #
  # source://otr-activerecord//lib/otr-activerecord/compatibility_5.rb#24
  def migration_base_class_name; end

  # The dir in which to put new migrations
  #
  # source://otr-activerecord//lib/otr-activerecord/compatibility_5.rb#19
  def migrations_path; end

  # All db migration dir paths
  #
  # source://otr-activerecord//lib/otr-activerecord/compatibility_5.rb#14
  def migrations_paths; end
end

# Compatibility layer for ActiveRecord 6
#
# source://otr-activerecord//lib/otr-activerecord/compatibility_6.rb#4
class OTR::ActiveRecord::Compatibility6
  # Compatibility layer for ActiveRecord 6
  #
  # @return [Compatibility6] a new instance of Compatibility6
  #
  # source://otr-activerecord//lib/otr-activerecord/compatibility_6.rb#8
  def initialize; end

  # Force RACK_ENV/RAILS_ENV to be 'test' when running any db:test:* tasks
  #
  # @return [Boolean]
  #
  # source://otr-activerecord//lib/otr-activerecord/compatibility_6.rb#30
  def force_db_test_env?; end

  # Returns the value of attribute major_version.
  #
  # source://otr-activerecord//lib/otr-activerecord/compatibility_6.rb#5
  def major_version; end

  # Basename of migration classes
  #
  # source://otr-activerecord//lib/otr-activerecord/compatibility_6.rb#24
  def migration_base_class_name; end

  # The dir in which to put new migrations
  #
  # source://otr-activerecord//lib/otr-activerecord/compatibility_6.rb#19
  def migrations_path; end

  # All db migration dir paths
  #
  # source://otr-activerecord//lib/otr-activerecord/compatibility_6.rb#14
  def migrations_paths; end
end

# Compatibility layer for ActiveRecord 7
#
# source://otr-activerecord//lib/otr-activerecord/compatibility_7.rb#4
class OTR::ActiveRecord::Compatibility7 < ::OTR::ActiveRecord::Compatibility6
  # @return [Compatibility7] a new instance of Compatibility7
  #
  # source://otr-activerecord//lib/otr-activerecord/compatibility_7.rb#5
  def initialize; end
end

# Rack middleware that returns active db connections to the connection pool after a request completes.
#
# source://otr-activerecord//lib/otr-activerecord/middleware/connection_management.rb#6
class OTR::ActiveRecord::ConnectionManagement
  # @return [ConnectionManagement] a new instance of ConnectionManagement
  #
  # source://otr-activerecord//lib/otr-activerecord/middleware/connection_management.rb#7
  def initialize(app); end

  # source://otr-activerecord//lib/otr-activerecord/middleware/connection_management.rb#11
  def call(env); end
end

# Rack middleware to enable ActiveRecord's query cache for each request.
#
# source://otr-activerecord//lib/otr-activerecord/middleware/query_cache.rb#6
class OTR::ActiveRecord::QueryCache
  # @return [QueryCache] a new instance of QueryCache
  #
  # source://otr-activerecord//lib/otr-activerecord/middleware/query_cache.rb#7
  def initialize(app); end

  # source://otr-activerecord//lib/otr-activerecord/middleware/query_cache.rb#14
  def call(env); end
end

# source://otr-activerecord//lib/otr-activerecord/middleware/query_cache.rb#18
class OTR::ActiveRecord::QueryCache::ActionDispatchHandler
  # @return [ActionDispatchHandler] a new instance of ActionDispatchHandler
  #
  # source://otr-activerecord//lib/otr-activerecord/middleware/query_cache.rb#19
  def initialize(app); end

  # source://otr-activerecord//lib/otr-activerecord/middleware/query_cache.rb#23
  def call(env); end
end

# Gem version
#
# source://otr-activerecord//lib/otr-activerecord/version.rb#4
OTR::ActiveRecord::VERSION = T.let(T.unsafe(nil), String)
