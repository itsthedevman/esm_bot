en:
  commands:
    request:
      sent: "Request `%{uuid}` has been sent to %{user}. They have 1 day to respond to your request."
      accept_name: "To **accept** this request"
      accept_value: "[ACCEPT](%{url})"
      decline_name: "To **decline** this request"
      decline_value: "[DECLINE](%{url})"
      command_usage_name: "Don't feel safe going to my website?"
      command_usage_value: "That's okay! You can accept or decline this request by using ```%{prefix}accept %{uuid}``` or ```%{prefix}decline %{uuid}```"
    base:
      description: A test command
      example: |-
        A test example
    eval:
      description: "Executes the provided string in ruby"
      example: |-
        **`%{prefix}eval true`**
        Returns true
    say:
      description: "A development command. Forces the bot to say whatever is inputted"
      example: |-
        **`%{prefix}say hello`**
        The bot will reply hello
    help:
      arguments:
        category: "The categories can be found by just using `%{prefix}help`"
      description: "A helpful command. An unhelpful description"
      example: |-
        **`%{prefix}help`**
        Displays information about getting started with Exile Server Manager

        **`%{prefix}help commands`**
        Displays all commands

        **`%{prefix}help set_id`**
        Displays detailed information about the `set_id` command
      categories:
        name: "Categories"
        value: |-
         **`%{prefix}help commands`**
         List all commands

         **`%{prefix}help <command_name>`**
         Get information about the provided command
      getting_started:
        title: "Hi %{user}! My name is Exile Server Manager, or ESM for short!"
        description: "I have a bunch of useful commands for both players and server owners alike."
      commands:
        player:
          title: "Player Commands"
          description: "These commands are for players to interact with their character in game. They are primarily used in a Direct Message with me, but can be available to use in a community's Discord server or on your own with Player Mode Enabled.\nPlease note, communities have the ability to disable or whitelist commands for their servers, regardless of where the command is used.\nMore information about a particular command can be found by using the `%{prefix}help command_name` command. For example: `%{prefix}help servers`"
        admin:
          title: "Admin Commands"
          description: "These commands are locked by default and may only be used by a community's admins and the whitelisted roles."
        development:
          title: "Development Commands"
          description: "These commands are only available in development mode."
      command:
        title: "`%{prefix}%{name}` Documentation"
        note: "**Note:**"
        limited_to: "This command is available only in a %{channel_type} channel with me."
        whitelist_enabled: "This command may be available only to certain roles."
        usage: "**__Usage__**"
        aliases:
          name: "**__Aliases__**"
          value: "This command can also be accessed by the following aliases: %{aliases}"
        arguments: "**__Arguments__**"
        examples: "**__Examples__**"
    mode:
      arguments:
        mode: "Sets which mode, valid options are `server` or `player`"
      description: "Changes which mode ESM is in"
      example: |-
        **`%{prefix}mode esm server`**
        Disables player mode. Set this mode if your community hosts servers

        **`%{prefix}mode esm player`**
        Enables player mode. Set this mode if you play on servers
      enabled: "✅ Player mode has been enabled for **%{community_name}**. All of my player commands may now be used on its Discord server"
      disabled: "✅ Player mode has been disabled for **%{community_name}**. You may now manage your community and servers via my [Dashboard](https://www.esmbot.com/portal)"
    id:
      description: "Displays the current Community's community ID for ESM"
      example: |-
        `%{prefix}id`
        Returns the Community's ID
      embed:
        description: "**%{community_name}'s** community ID is **`%{community_id}`**"
        field:
          name: "Want to list all registered servers for this community?"
          value:  "**`%{prefix}servers %{community_id}`**"
    whois:
      description: "Displays all available information about a player via their Steam UID, Discord ID, or Mention"
      example: |-
        **`%{prefix}whois @Bryan`**
        Using their mention, get all available information about this player

        **`%{prefix}whois 76561198037177305`**
        Using their steam uid, get all available information about this player

        **`%{prefix}whois 137709767954137088`**
        Using their Discord ID, get all available information about this player
      discord:
        header: "__Discord Information__"
        id: "ID"
        username: "Username"
        status: "Status"
        created_at: "Created"
      steam:
        header: "__Steam Information__"
        id: "ID"
        username: "Username"
        visibility: "Profile Visibility"
        created_at: "Created"
        community_banned: "Community banned?"
        vac_banned: "VAC banned?"
        number_of_vac_bans: "Number of VAC bans"
        days_since_vac_ban: "Days since last VAC ban"
    me:
      description: "Displays information about your player (money, health, poptabs, territories, etc.) on the requested server"
      example: |-
        **`%{prefix}me esm_malden`**
        Returns my player information on `esm_malden`
      embed:
        title: "%{user}'s stats on `%{server_id}`"
    server:
      description: "Displays connection, up time, next restart and other miscellanous information about the provided server ID"
      example: |-
        **`%{prefix}server esm_malden`**
        Returns information about the server `esm_malden`
      online_for: "✅ Online for"
      restart_in: "⏰ Next restart in"
    servers:
      description: "Displays all registered servers for a given community ID, regardless if they are online or not"
      example: |-
        **`%{prefix}servers esm`**
        Returns all registered servers for `esm`.
      offline: "❌ Offline"
      offline_for: "❌ Offline for %{time}"
    territories:
      description: "Displays all territories that you own or have joined for the provided server ID"
      example: |-
        **`%{prefix}territories esm_malden`**
        Returns all owned or joined territories for server `esm_malden`
      current_territory_stats: "__Current Territory Stats__"
      next_territory_stats: "__Next Territory Stats__"
      territory_members: "__Territory Members__"
    pay:
      description: "Pay the territory protection for a territory using poptabs from your locker.\nYou can see your territories by using `%{prefix}territories`"
      example: |-
        **`%{prefix}pay esm_malden qqoej`**
        Pay the territory protection for `qqoej` on server `esm_malden`

        **`%{prefix}pay esm_malden fort_kickass`**
        Pay the territory protection for custom territory ID `fort_kickass` on server `esm_malden`
      embed:
        description: "%{user}, `%{server_id}` has successfully received the payment of **%{cost}** for `%{territory_id}`.\nYou have **%{locker_amount}** left in your locker."
    birb:
      description: "Who doesn't like some high quality birbs?"
      example: |-
        **`%{prefix}birb`**
        Returns a random bird image
      waiting: "Tossing bird seed..."
    doggo:
      description: "Humanity's best friend"
      example: |-
        **`%{prefix}doggo`**
        Returns a random dog image
      waiting: "Shaking treat jar..."
    meow:
      description: "It's so fluffy I'm going to die!!!"
      example: |-
        **`%{prefix}meow`**
        Returns a random cat image
      waiting: "pispispispispispispispis"
    snek:
      description: "Nope rope, danger noodle, whatever you want to call them. One thing for sure is that they are cute."
      example: |-
        **`%{prefix}snek`**
        Returns a random snake image
      waiting: "Slithering..."
    gamble:
      description: "Feeling lucky? This command will gamble the specified amount of poptabs for the provided server ID. Poptabs are taken from your locker on that server."
      example: |-
        **`%{prefix}gamble esm_malden 50`**
        Gambles 50 poptabs from the locker on server `esm_malden`

        **`%{prefix}gamble esm_altis half`**
        Gambles half of the poptabs in the locker on server `esm_altis`

        **`%{prefix}gamble esm_tanoa all`**
        Gambles all of the poptabs in the locker on server `esm_tanoa`

        **`%{prefix}gamble esm_namalsk stats`**
        Displays gambling statistics for server `esm_namalsk`
      arguments:
        amount: "The amount of poptabs to gamble. Poptabs are withdrawled from your locker.\nThe following options can be provided instead of a number:\n- `all`: Gambles all of your poptabs in your locker.\n- `half`: Gambles half of your poptabs in your locker\n- `stats`: Returns win/loss statistics for the provided server"
      stats:
        title: "Gambling statistics for `%{server_id}`"
        user_stats: "**%{user}'s stats**"
        server_stats: "**Server stats**"
        total_wins: "Total Wins"
        total_losses: "Total Losses"
        total_poptabs_won: "Total Poptabs Won"
        total_poptabs_lost: "Total Poptabs Lost"
        most_poptabs_won: "Most Poptabs Won"
        most_poptabs_lost: "Most Poptabs Lost"
        current_streak: "Current Streak"
        longest_win_streak: "Longest Win Streak"
        longest_losing_streak: "Longest Losing Streak"
        longest_current_streak: "Longest Current Streak"
        user_with: "%{user} with %{value}"
    set_id:
      description: "**Territory Owner Only.**\nSets a custom territory ID for the provide server ID. Once set, this custom territory ID can be used whenever a command requires a territory ID argument."
      example: |-
        **`%{prefix}setid esm_malden jqjoe no_u`**
        Sets territory `jqjoe` to be `no_u`

        **`%{prefix}setid esm_altis fort_awesome tent_sadness`**
        Changes territory `fort_awesome` to be `tent_sadness`
      arguments:
        new_territory_id: "The new territory ID to use. This ID can be 3 to 20 characters long and can **only contain letters, numbers, and underscores**."
      success_message: ":confetti_ball: \nTerritory `%{old_territory_id}`'s ID is now `%{new_territory_id}`. You can now use this ID wherever a command requires `<territory_id>`\nFor example: ```%{prefix}pay %{server_id} %{new_territory_id}```"
    accept:
      description: "Accepts a request based off its UUID"
      example: |-
        **`%{prefix}accept c619`**
        Accepts request `c619` from your pending requests
      success_message: "The request has been accepted and I've notified the requestor"
    decline:
      description: "Declines a request based off its UUID"
      example: |-
        **`%{prefix}decline e09e`**
        Declines request `e09e` from your pending requests
      success_message: "The request has been declined. The requestor **has not** be notified"
    add:
      description: "Adds the target user as a builder in the provided territory"
      example: |-
        **`%{prefix}add esm_malden jqjoe @Bryan`**
        Adds @Bryan to `jqjoe` on `esm_malden`

        **`%{prefix}add esm_malden some_territory @your_username`**
        If you are a territory admin, you may replace `@your_username` with a tag of yourself to add yourself to this territory.
      request_description: "Hi %{target_user}!\n%{current_user} wants to add you to their territory `%{territory_id}` on `%{server_id}`"
      requestee_description: "Hi %{target_user}!\n%{current_user} wants to add you to their territory `%{territory_id}` on `%{server_id}`"
      requestor_accepted: "Request `%{uuid}` has been accepted. Processing your request to add %{target_user} to `%{territory_id}` on `%{server_id}`"
      requestor_success: "Hi %{current_user}, %{target_user} has been added to territory `%{territory_id}` on %{server_id}"
      requestee_success: "Hi %{user}, you've been added to `%{territory_id}` successfully. Welcome aboard!"
    server_territories:
      description: "Displays the ID, name, and owner information for every territory on the provided server"
      example: |-
        **`%{prefix}server_territories esm_malden`**
        Displays all territories for server `esm_malden`

        **`%{prefix}server_territories esm_tanoa owner_name`**
        Displays all territories for server `esm_tanoa`, but they are sorted the owner's name
      arguments:
        order_by: "Controls how the territories are sorted before they are displayed.\nValid options are: `id`, `territory_name`, `owner_uid`"
    broadcast:
      description: "Sends the provided message to all servers or the provided server ID in your community.\nRegistered players on these servers will receive the message via Direct Message if they have `custom` notification allowed for the server."
      example: |-
        **`%{prefix}broadcast esm_malden This is an emergency announcement`**
        Broadcasts `This is an emergency announcement` to every registered player on `esm_malden`.

        **`%{prefix}broadcast all Admin event going on right meow. More information on our Discord!`**
        Brodcasts `Admin event going on right meow. More information on our Discord!` to registered player on every server for this community.

        **`%{prefix}broadcast preview Testing`**
        Provides a preview of the message without sending it.
      arguments:
        broadcast_to: "This can be either a valid `server_id` to send to just that server, `all` to send to all of your community's servers, or `preview` to just preview the message without sending it"
        message: "The message to send or preview. This supports Discord Markdown and cannot be more than 2000 characters long"
      confirmation_embed:
        title: "Broadcast Confirmation"
        description: "I will be sending the above message to the players on %{server_ids}"
        field_name: "**Are you sure you want to send?**"
        field_value: "Reply back `yes` or `no`"
      cancelation_reply: ":thumbsup: I've cancelled your request."
      success_message: ":mailbox: %{user}, they've got mail!"
      broadcast_embed:
        title: "Broadcast message from %{community_name} regarding %{server_ids}"
        footer: "You may opt out of these messages by using `!preferences`"
    preferences:
      description: "Allow or deny notifications on a per server basis. All notifications are enabled by default, this command allows for fine grained tuning."
      example: |-
        **`%{prefix}preferences esm_malden allow`**
        Allows `esm_malden` to send you all notification types

        **`%{prefix}preferences esm_altis deny protection-money-paid`**
        Blocks `esm_altis` from sending you the `protection-money-paid` XM8 notification
      arguments:
        state: "Controls if the notification will be sent to you. Valid options are `allows` and `deny`"
        type: "The notification type. Valid options are:\n- `all`\n- `custom`\n- `base-raid`\n- `flag-stolen`\n- `flag-restored`\n- `flag-steal-started`\n- `protection-money-due`\n- `protection-money-paid`\n- `grind-started`\n- `hack-started`\n- `charge-plant-started`\n- `marxet-item-sold`"
    sqf:
      description: "Executes the given codes on a server or a target. If the code is executed on the server and has a return value, the value will be returned."
      example: |-
        **`%{prefix}sqf esm_malden isServer`**
        Executes `isServer` on `esm_malden` and returns `true` back.

        **`%{prefix}sqf esm_tanoa @Bryan player setDamage 1;`**
        Executes `player setDamage 1` on @Bryan's player in game. If the player is not in game, an error will be returned.
      arguments:
        execution_target: "The target to execute the codes on. This can be any valid target (Discord ID, Steam UID, @mention) or leave blank to execute on the server."
        code_to_execute: "The SQF code to execute. The given code can be all one line or span multi-lines.\n**Note:** This code needs to be valid or the server will not return a response."
      responses:
        server_success_with_return: "Hey %{user}, `%{server_id}` executed your code successfully and the code returned the following: ```%{response}```"
        server_success: "Hey %{user}, `%{server_id}` executed your code successfully and the code returned nothing."
        invalid_target: "I'm sorry %{user}, `%{server_id}` has informed me that `%{target_uid}` is not online or has not joined the server.\nEither way, your code was not executed."
        target_success: "Hey %{user}, `%{server_id}` executed your code successfully on `%{target_uid}`"
    reset_cooldown:
      description: |-
        Resets a cooldown for a player.
        Admins can now either:
          Reset all cooldowns for a user for every server in their community.
          Reset a single command cooldown on a user for every server in their community.
          Or, reset a single command cooldown on a user for a single server in their community.
        See examples for more details
      example: |-
        **`%{prefix}reset_cooldown @Bryan`**
        Resets every command's cooldown for @Bryan on your community.

        **`%{prefix}reset_cooldown @Bryan reward`**
        Resets the `reward` cooldown for @Bryan on your community.

        **`%{prefix}reset_cooldown @Bryan reward esm_malden`**
        Resets the `reward` cooldown for @Bryan on `esm_malden` only
      confirmation_embed:
        title: "Reset Confirmation"
        description:
          base: "Hey %{user}, just to confirm, I will be resetting %{target_user}'s"
          all: " cooldowns for your community.\nThis means every command for all of your servers."
          with_command_name: " `%{command_name}` cooldown for your community (including servers)."
          with_name_and_server: " `%{command_name}` cooldowns for `%{server_id}`."
        field_name: "**Proceed?**"
        field_value: "Reply back `yes` or `no`"
      cancelation_reply: ":thumbsup: I've cancelled your request."
      success_embed:
        description:
          base: ":white_check_mark: Hey %{user}, I have reset %{target_user}'s"
          all: " cooldowns for your community."
          with_command_name: " `%{command_name}` cooldown for your community (including servers)."
          with_name_and_server: " `%{command_name}` cooldowns for `%{server_id}`."
    changelog:
      description: "Displays the changelog for the current version of ESM"
      example: |-
        **`%{prefix}changelog`**
        Displays the current changelog
    promote:
      description: "**Territory Owner Only.**\nPromotes a player to moderator in a territory. They must be a member of the territory first before they can be promoted.\nYou may add a player to territory using `%{prefix}add`"
      example: |-
        **`%{prefix}promote esm_malden awesome @Bryan`**
        Promotes @Bryan to moderator in territory `awesome` on `esm_malden`

        **`%{prefix}promote esm_malden fort_a 76561198037177305`**
        Promotes `76561198037177305` to moderator in territory `fort_a` on `esm_malden`
      success_message: "Hey %{user}, `%{target_uid}` has been promoted to moderator in territory `%{territory_id}` on `%{server}`"
    demote:
      description: "**Territory Owner Only.**\nDemotes a player from moderator to builder in a territory."
      example: |-
        **`%{prefix}demote esm_malden awesome @Bryan`**
        Demote @Bryan to builder in territory `awesome` on `esm_malden`

        **`%{prefix}promote esm_malden fort_a 76561198037177305`**
        Demote `76561198037177305` to builder in territory `fort_a` on `esm_malden`
      success_message: "Hey %{user}, `%{target_uid}` has been demoted to builder in territory `%{territory_id}` on `%{server}`"
    remove:
      description: "**Territory Owner or Moderator Only.**\nRemoves a player from a territory."
      example: |-
        **`%{prefix}remove esm_malden awesome @Bryan`**
        Removes @Bryan from territory `awesome` on `esm_malden`

        **`%{prefix}remove esm_malden fort_a 76561198037177305`**
        Removes `76561198037177305` from territory `fort_a` on `esm_malden`
      success_message: "Hey %{user}, `%{target_uid}` has been removed from territory `%{territory_id}` on `%{server}`"
    upgrade:
      description: "**Territory Owner or Moderator Only.**\nUpgrades a territory to the next level using poptabs from your locker.\nTo see costs, please use the `%{prefix}territories` command"
      example: |-
        **`%{prefix}upgrade esm_malden awesome`**
        Upgrades territory `awesome` to the next level on `esm_malden`
      success_message: |-
        Hey %{user}, you successfully upgraded territory `%{territory_id}` for **%{cost}**.
        Your territory has reached level **%{level}** and now has a radius of **%{range}** meters.
        After this transaction, you have **%{locker}** left in your locker.
    restore:
      description: "Restores a territory if marked for deletion for missing a territory payment."
      example: |-
        **`%{prefix}restore esm_malden jquee`**
        Restores territory `jquee` on esm_malden
      success_message: "Hey %{user}, `%{territory_id}` has been restored"
      failure_message: "I'm sorry %{user}, `%{territory_id}` no longer exists on `%{server}`."
    register:
      description: "Provides information on how to link a Steam account to ESM"
      example: |-
        **`%{prefix}register`**
        Provides information on how to link a Steam account to ESM
      already_registered: "Hey %{user}, it looks like you are already registered with me. You can view all of my commands using `%{prefix}help commands`.\nLooking for the registration link? It's https://www.esmbot.com/register"
      registration: |-
        Greetings %{user}! My name is Exile Server Manager and I'm here to help make interacting with your character on a Exile server easier.
        In order to use my commands, I'll need you to link your Steam account with your Discord account on my website.
        When you get logged into my website, please make sure to **double check your Discord account information** to ensure that you will be registering with the correct account.

        Feel free to head over to https://www.esmbot.com/register when you are ready.
    uptime:
      description: "Displays how long the server has been online"
      example: |-
        **`%{prefix}uptime esm_malden`**
      server_uptime: "`%{server}` has been online for %{time}"
    steam_uid:
      description: "Displays the registered Steam UID for your account"
      example: |-
        **`%{prefix}steam_uid`**
        Displays the registered Steam UID for your account
      response: "Hey %{user}, your Steam UID is `%{steam_uid}`."
    player:
      description: "Modifies a player on a server, regardless of them being online or not."
      example: |-
        **`%{prefix}player esm_malden @Bryan money 1500`**
        Gives @Bryan's player on `esm_malden` 1500 poptabs

        **`%{prefix}player esm_altis @Bryan locker -50`**
        Removes 50 poptabs from @Bryan's locker on `esm_altis`

        **`%{prefix}player esm_namalsk 76561198037177305 k`**
        RIP @Bryan. Kills @Bryan's player on `esm_namalsk`
      arguments:
        type: |-
          Valid types: `money`/`m`, `respect`/`r`, `locker`/`l`, `heal`/`h`, `kill`/`k`
        value: |-
          For types `money`, `respect`, and `locker`:
            - This argument is required and must be a positive or negative number.
            - Positive numbers will add the given amount of that type
            - Negative numbers will remove the given amount of that type
          For types `heal` and `kill`:
            - This argument is optional
    reward:
      description: "Requests a reward on the given server. After requesting a reward, you will be sent a confirmation message in your PMs with me. From here, you can confirm you are logged into the server and alive before accepting the rewards."
      example: |-
        **`%{prefix}reward esm_malden`**
        Requests a reward on `esm_malden`
      request_description: |-
        Hey %{user}, you have requested a rewards on `%{server}`. In order to receive the rewards on the server, you must be spawned in and alive. Any items given will be added to your inventory automatically, and if you do not have space, **they will be dropped on the ground**.
      receipt: "Hi %{user}, the following goodies have been delivered to you!\n%{items}"
      check_pm: "Hi %{user}, you'll need to confirm this request. I've sent you a confirmation message in a direct message with you."
    info:
      description: "Displays information about a particular player or territory. This command is the admin equivalent to the `!territories` and `!me` commands."
      example: |-
        **`%{prefix}info esm_malden @Bryan`**
        Using their mention, return their player stats on `esm_malden`

        **`%{prefix}info esm_tanoa 76561198037177305`**
        Using their steam uid, return their player stats on `esm_tanoa`

        **`%{prefix}info esm_altis 137709767954137088`**
        Using their Discord ID, return their player stats on `esm_altis`

        **`%{prefix}info esm_namalsk jquee`**
        Return the territory information for `jquee`
      no_response: "I'm sorry %{user}, I didn't find any information related to your request."
